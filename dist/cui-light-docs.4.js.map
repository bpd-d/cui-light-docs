{"version":3,"sources":["webpack:///./src/components/partials/forms/CuiSelect.tsx","webpack:///./src/components/main/icons/title.tsx","webpack:///./src/components/main/icons/header.tsx","webpack:///./src/components/main/icons/card.tsx","webpack:///./src/components/main/icons/group.tsx","webpack:///./src/components/main/icons/icons.tsx","webpack:///./src/components/hooks/params.ts","webpack:///./src/utils/groups.ts"],"names":["CuiSelect","props","state","setState","value","current","optionsData","options","map","opt","key","className","name","placeholder","onChange","ev","target","CuiIconsHeaderTitle","isText","text","length","result","title","CuiIconsComponentHeader","filter","htmlFor","type","event","onUpdate","categories","category","to","uri","IconElement","code","href","onClick","then","CuiIconsGroupComponent","group","data","icon","CuiIconsGroupedComponent","list","setList","icons","view","push","prepareViews","CATEGORY_ALL","IconsComponent","grouped","isLoading","setIsLoading","location","history","params","search","URLSearchParams","useSearchParams","getCategory","find","x","prepareGroup","Promise","resolve","reject","getGroup","array","item","includes","toLowerCase","isFilterMatching","isCategoryMatching","reduce","index","appendResult","filterData","queryString","get","cat","getFilterParams","PageWithHeaderBase","description","set","pathname","toString","IsLoading"],"mappings":"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","file":"cui-light-docs.4.js","sourcesContent":["import * as React from \"react\";\r\nimport { capitalize } from \"../../../utils/function\";\r\n\r\nexport interface CuiSelectProps {\r\n    current: string;\r\n    options: string[];\r\n    name: string;\r\n    placeholder?: string;\r\n    onChange?: (value: string) => void;\r\n}\r\n\r\nexport interface SelectState {\r\n    value: string;\r\n}\r\n\r\nexport function CuiSelect(props: CuiSelectProps) {\r\n    const [state, setState] = React.useState<SelectState>({\r\n        value: props.current\r\n    })\r\n\r\n    let optionsData = props.options.map(opt => {\r\n        return <option key={opt} value={opt}>{capitalize(opt)}</option>\r\n    })\r\n\r\n    function handleChange(ev: any) {\r\n        setState({ value: ev.target.value });\r\n        if (props.onChange) {\r\n            props.onChange(ev.target.value)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <select className=\"cui-select\" name={props.name} value={state.value} placeholder={props.placeholder} onChange={handleChange}>\r\n            {optionsData}\r\n        </select>);\r\n}","import * as React from \"react\";\r\n\r\nexport interface CuiIconsHeaderTitleProps {\r\n    text: string;\r\n}\r\n\r\nexport function CuiIconsHeaderTitle(props: CuiIconsHeaderTitleProps) {\r\n    const isText = props.text && props.text.length > 0;\r\n    const result = <span>Results for: <span className=\"cui-text-italic\">{props.text}</span></span>;\r\n    const title = isText ? result : \"\";\r\n    return (\r\n        <h2 className=\"cui-h2 cui-margin-remove\">{title}</h2>\r\n    )\r\n}","import * as React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { CuiSelect } from \"../../partials/forms/CuiSelect\";\r\nimport { CuiIconsHeaderTitle } from \"./title\";\r\nimport { CuiIconFilterData } from \"./icons\";\r\nimport { ROUTES } from \"../../../routes\";\r\n\r\n\r\nexport interface CuiIconsComponentHeaderProps {\r\n    categories: string[];\r\n    filter: CuiIconFilterData;\r\n    onUpdate?: (data: CuiIconFilterData) => void;\r\n}\r\n\r\nexport function CuiIconsComponentHeader(props: CuiIconsComponentHeaderProps) {\r\n    function onSelectChange(value: string) {\r\n        if (props.onUpdate) {\r\n            props.onUpdate({ ...props.filter, category: value })\r\n        }\r\n    }\r\n\r\n    function onInputChange(event: any) {\r\n        if (props.onUpdate) {\r\n            props.onUpdate({ ...props.filter, filter: event.target.value })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"cui-flex cui-between-m cui-middle\">\r\n            <CuiIconsHeaderTitle text={props.filter.filter} />\r\n            <div className=\"cui-flex cui-right--s cui-flex-grow cui-middle\">\r\n                <div className=\"cui-form cui-flex cui-between cui-left--s cui-width-1-1 cui-width-auto--m cui-margin-small cui-middle\">\r\n                    <label htmlFor=\"filter\" className=\"cui-form-label cui-margin-small-right\">Filter</label>\r\n                    <input className=\"cui-input\" type=\"text\" placeholder=\"Filter\" value={props.filter.filter} onChange={onInputChange} />\r\n                </div>\r\n                <div className=\"cui-form cui-flex cui-between cui-left--s cui-width-1-1 cui-width-auto--m cui-margin-small cui-middle\">\r\n                    <label htmlFor=\"categories\" className=\"cui-form-label cui-margin-small-right\">Categories</label>\r\n                    <CuiSelect name=\"categories\" options={props.categories} current={props.filter.category} placeholder=\"Category\" onChange={onSelectChange} />\r\n                </div>\r\n                <Link to={ROUTES['builder'].uri} className=\"cui-button cui-accent cui-width-1-1 cui-width-auto--m cui-margin-small cui-icon-margin\" cui-icon=\"wrench\">\r\n                    Builder\r\n                </Link>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import * as React from \"react\";\r\nimport { toast } from \"../../../core/cui\";\r\nimport { copyText } from \"../../../utils/function\";\r\n\r\nexport interface IconElementProps {\r\n    name: string;\r\n    code: string;\r\n}\r\n\r\nexport function IconElement(props: IconElementProps) {\r\n    function onLinkClick() {\r\n        copyText(props.code).then((value) => {\r\n            toast(`${value} copied`);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"cui-card cui-default\">\r\n            <div className=\"cui-card-body cui-flex-center cui-padding-large\">\r\n                <span className=\"cui-icon\" cui-icon={props.code}></span>\r\n            </div>\r\n            <div className=\"cui-card-footer cui-flex-center cui-text-nowrap cui-overflow-hidden\">\r\n                <a href=\"#\" className=\"cui-link\" onClick={onLinkClick}>{props.name}</a>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { IconElementData, IconsGroup, GroupedIconsData } from \"./icons\";\r\nimport * as React from \"react\";\r\nimport { capitalize } from \"../../../utils/function\";\r\nimport { CuiGroupItem, CuiGroup } from \"../../../utils/groups\";\r\nimport { IconElement } from \"./card\";\r\n\r\n\r\nexport interface CuiIconsGroupedComponentProps {\r\n    icons: CuiGroup<IconElementData>;\r\n}\r\n\r\n\r\nexport interface CuiIconsGroupComponentProps {\r\n    group: CuiGroupItem<IconElementData>;\r\n}\r\n\r\nexport function CuiIconsGroupComponent(props: CuiIconsGroupComponentProps) {\r\n    return (\r\n        <li className=\"cui-active\">\r\n            <a className=\"cui-accordion-title\">{capitalize(props.group.name)}</a>\r\n            <div className=\"cui-accordion-content cui-flex-grid cui-child-width-1-2 cui-child-width-1-4--m cui-child-width-1-6--l\">\r\n                {props.group.data.map(icon => {\r\n                    return (<div key={icon.code}><IconElement name={icon.name} code={icon.code} /></div>);\r\n                })}\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\n\r\nexport function CuiIconsGroupedComponent(props: CuiIconsGroupedComponentProps) {\r\n    const [list, setList] = React.useState<JSX.Element[]>([]);\r\n\r\n    function prepareViews(icons: CuiGroup<IconElementData>) {\r\n        let view: JSX.Element[] = [];\r\n        for (let group in icons) {\r\n            view.push(<CuiIconsGroupComponent key={group} group={icons[group]} />)\r\n        }\r\n        return view;\r\n    }\r\n\r\n\r\n    React.useEffect(() => {\r\n\r\n    }, [props.icons])\r\n    return (\r\n        <ul className=\"cui-accordion\" cui-accordion=\"single: false\" >\r\n            {prepareViews(props.icons)}\r\n        </ul >\r\n    );\r\n}","import * as React from \"react\";\r\nimport { CuiIconsComponentHeader } from \"./header\";\r\nimport { CuiIconsGroupedComponent } from \"./group\";\r\nimport { CuiGroup, group } from \"../../../utils/groups\";\r\nimport { iconsData } from \"../../../statics/icons\";\r\nimport { PageWithHeaderBase } from \"../../../components/base/PageWithHeaderBase\";\r\nimport { IsLoading } from \"../../../components/base/IsLoading\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { useSearchParams } from \"../../../components/hooks/params\";\r\n\r\nexport const CATEGORY_ALL = 'all';\r\n\r\nconst PARAM_FILTER = 'filter';\r\nconst PARAM_CATEGORY = 'category';\r\n\r\nexport interface GroupedIconsData {\r\n    [id: string]: IconsGroup;\r\n}\r\n\r\nexport interface IconsGroup {\r\n    name: string;\r\n    icons: IconElementData[];\r\n}\r\n\r\nexport interface IconsProps {\r\n    site?: string;\r\n}\r\n\r\nexport interface IconElementData {\r\n    name: string;\r\n    code: string;\r\n    category: string;\r\n}\r\n\r\nexport interface IconComponentState {\r\n    filter: CuiIconFilterData;\r\n    grouped: CuiGroup<IconElementData>;\r\n}\r\n\r\nexport interface CuiIconFilterData {\r\n    filter: string;\r\n    category: string;\r\n}\r\n\r\nexport default function IconsComponent(props: IconsProps) {\r\n    const [state, setState] = React.useState<IconComponentState>({\r\n        filter: { category: CATEGORY_ALL, filter: \"\" },\r\n        grouped: {}\r\n    });\r\n\r\n    const categories = React.useRef<string[]>([]);\r\n\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n\r\n    const location = useLocation();\r\n    const history = useHistory();\r\n    const { params, search } = useSearchParams(location);\r\n\r\n    function onFilterUpdate(data: CuiIconFilterData) {\r\n        const params = new URLSearchParams();\r\n        params.set(PARAM_FILTER, data.filter);\r\n        params.set(PARAM_CATEGORY, data.category);\r\n\r\n        history.push({\r\n            pathname: location.pathname,\r\n            search: params.toString()\r\n        })\r\n        setState({\r\n            ...state,\r\n            filter: data\r\n        })\r\n    }\r\n\r\n    function getCategory(result: string[], current: IconElementData) {\r\n        if (!result.find(x => x == current.category)) {\r\n            result.push(current.category);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function isCategoryMatching(item: IconElementData, category: string) {\r\n        return !category || category === CATEGORY_ALL ? true : item.category === category\r\n    }\r\n\r\n    function isFilterMatching(item: IconElementData, filter: string) {\r\n        return !filter || filter === '' ? true : item.code.includes(filter.toLowerCase());\r\n    }\r\n\r\n    function prepareGroup(data: CuiIconFilterData): Promise<CuiGroup<IconElementData>> {\r\n        return new Promise((resolve, reject) => {\r\n            resolve(group((item: IconElementData) => {\r\n                return item.category;\r\n            }, iconsData, (item: IconElementData) => {\r\n                return isFilterMatching(item, data.filter) && isCategoryMatching(item, data.category);\r\n            }));\r\n        });\r\n    }\r\n\r\n    function getFilterParams(queryString: string): CuiIconFilterData {\r\n        // const searchParams = new URLSearchParams(queryString);\r\n        const filter = params.get(PARAM_FILTER);\r\n        const cat = params.get(PARAM_CATEGORY);\r\n        return {\r\n            filter: filter ?? \"\",\r\n            category: cat && categories.current.includes(cat) ? cat : CATEGORY_ALL\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        setIsLoading(true);\r\n\r\n        if (categories.current.length === 0) {\r\n            categories.current = iconsData.reduce<string[]>(getCategory, [])\r\n        }\r\n\r\n        const filterData = getFilterParams(location.search);\r\n\r\n        prepareGroup(filterData).then((group) => {\r\n            setState({\r\n                ...state,\r\n                filter: filterData,\r\n                grouped: group\r\n            })\r\n            setIsLoading(false)\r\n        });\r\n\r\n    }, [search])\r\n\r\n    return <PageWithHeaderBase name=\"Icons\" description=\"cUI icons pack\">\r\n        <CuiIconsComponentHeader categories={categories.current} filter={state.filter} onUpdate={onFilterUpdate} />\r\n        {isLoading ? <IsLoading /> :\r\n            <CuiIconsGroupedComponent icons={state.grouped} />\r\n        }\r\n    </PageWithHeaderBase>\r\n}","import * as React from \"react\";\r\nimport { Location } from 'history';\r\n\r\nexport interface SearchParamsResult {\r\n    params: URLSearchParams,\r\n    search: string,\r\n}\r\n\r\nexport function useSearchParams<T>(location: Location<T>): SearchParamsResult {\r\n    const params = new URLSearchParams(location.search);\r\n\r\n    React.useEffect(() => {\r\n    }, [location.search])\r\n    return {\r\n        params: params,\r\n        search: location.search\r\n    };\r\n}","export interface CuiGroup<T> {\r\n    [id: string]: CuiGroupItem<T>;\r\n}\r\n\r\nexport interface CuiGroupItem<T> {\r\n    name: string;\r\n    data: T[];\r\n}\r\n\r\n/**\r\n * Function which groups items by specified condition.\r\n * Optionally allows to filter out not desired items\r\n * \r\n * @param getGroup - callback to get group name from item\r\n * @param array - array data to be grouped\r\n * @param filter- ? - optional callback to reject items wich don't pass filter condition\r\n * \r\n * @returns Grouped items\r\n */\r\nexport function group<T>(getGroup: (item: T, index: number) => string, array: T[], filter?: (item: T, index: number) => boolean): CuiGroup<T> {\r\n\r\n    function appendResult(result: CuiGroup<T>, item: T, group: string) {\r\n        if (result[group]) {\r\n            result[group].data.push(item)\r\n        } else {\r\n            result[group] = {\r\n                name: group,\r\n                data: [item]\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    return array ? array.reduce<CuiGroup<T>>((result: CuiGroup<T>, item: T, index: number) => {\r\n        if (filter && !filter(item, index)) {\r\n            return result;\r\n        }\r\n        let group = getGroup(item, index);\r\n        if (!group)\r\n            return result;\r\n        return appendResult(result, item, group)\r\n    }, {}) : null;\r\n}"],"sourceRoot":""}