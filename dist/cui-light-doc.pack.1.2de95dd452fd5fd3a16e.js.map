{"version":3,"sources":["webpack:///./src/statics/PluginDocs/alert.tsx","webpack:///./src/statics/PluginDocs/click.tsx","webpack:///./src/statics/PluginDocs/focus.tsx","webpack:///./src/statics/PluginDocs/introduction.tsx","webpack:///./src/statics/PluginDocs/keys.tsx","webpack:///./src/statics/PluginDocs/light.tsx","webpack:///./src/statics/PluginDocs/move.tsx","webpack:///./src/statics/PluginDocs/notification.tsx","webpack:///./src/statics/PluginDocs/print.tsx","webpack:///./src/statics/PluginDocs/resize.tsx","webpack:///./src/statics/PluginDocs/toast.tsx","webpack:///./src/statics/PluginDocs/index.tsx","webpack:///./src/api/DocsElementParser/ElementGenerator.ts","webpack:///./src/components/partials/pre.tsx","webpack:///./src/statics/common.ts","webpack:///./src/statics/Callbacks/callbacks.tsx","webpack:///./src/statics/Callbacks/index.tsx","webpack:///./src/api/DocsElementParser/GeneratorParsers.ts","webpack:///./src/components/preview/preview.tsx"],"names":["firstExample","tag","children","text","CuiDocsAlertScript","sections","name","description","example","classes","click","list","hint","title","content","CuiDocsClickScript","className","attributes","ev","CuiDocsFocusScript","CuiDocsPluginsIntroScript","CuiDocsKeysScript","CuiDocsAutoLightScript","CuiDocsMovePluginScript","CuiDocsNotificationScript","CuiDocsPrintScript","CuiLightResizePluginDocs","launchExample","pluginsList","uri","script","tags","ElementGenerator","parser","this","data","parse","PreNode","props","node","length","PreNodeWithChildren","level","PreNodeWithoutChildren","PreJsNode","pre","undefined","attr","attributesEl","arr","push","key","len","map","item","index","functionArgs","child","createGroup","createObjectNode","create","ClassesNode","AttributesNode","classesEl","join","GLOBAL_COUNTER","CuiDocsCallbackHandler","groups","forEach","g","addSingle","group","replace","prefix","idx","findIndex","find","args","split","get","trim","callback","callbacks","init","handler","value","createCallbackHandler","plugins","alert_info","id","type","options","message","onOk","window","$cui","emit","alert_ok_cancel","onCancel","alert_yes_no_cancel","onYes","onNo","toast","notify_base","Math","random","notify_description","notify_type","notify_action","actions","notify_no_close","auto","styleClass","call","next","onClick","CodePreviewAside","element","code","JsCodePreview","js","CodePreviewTabbed","identification","tabId","switchId","height","href","ExamplePreview","getJsCodePreview","build","GetTabbedPreview","GetPreivewWithoutCode"],"mappings":"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","file":"cui-light-doc.pack.1.2de95dd452fd5fd3a16e.js","sourcesContent":["import { ParserNode } from \"../../api/DocsElementParser/interfaces\";\r\nimport { DocsScript } from \"../../components/docs/base\";\r\nimport { getJsCodePreview, GetPreivewWithoutCode } from \"../../components/preview/preview\";\r\n\r\nconst firstExample: ParserNode = {\r\n    tag: \"group\",\r\n    children: [\r\n        {\r\n            tag: 'object',\r\n            text: `options`,\r\n            children: [\r\n                {\r\n                    tag: 'text',\r\n                    text: `title: \"Title\",`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `message: \"Message\",`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `onOk: () => { console.log(\"Ok\") },`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `onCancel: () => { console.log(\"Cancel\") },`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `onYes: () => { console.log(\"Yes\") },`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `onNo: () => { console.log(\"No\") }`\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            tag: 'object',\r\n            text: `data`,\r\n            children: [\r\n                {\r\n                    tag: 'text',\r\n                    text: `id: \"id\",`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `type: \"Info | OkCancel | YesNoCancel\",`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `options: options`\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            tag: \"text\",\r\n            text: `$cui.emit(\"alert\", \"~alert-plugin\", data)`\r\n        }\r\n\r\n    ]\r\n}\r\n\r\nconst baseExample: ParserNode = {\r\n    tag: \"div\",\r\n    children: [\r\n        { tag: \"button\", classes: [\"cui-button\"], text: \"Info\", click: \"plugins:alert_info\" },\r\n        { tag: \"button\", classes: [\"cui-button\"], text: \"OkCancel\", click: \"plugins:alert_ok_cancel\" },\r\n        { tag: \"button\", classes: [\"cui-button\"], text: \"YesNoCancel\", click: \"plugins:alert_yes_no_cancel\" },\r\n    ]\r\n}\r\n\r\nexport const CuiDocsAlertScript: DocsScript = {\r\n    sections: [\r\n        {\r\n            name: \"Usage\",\r\n            description: `Alert is a special type of dialog. It can be used as information, Ok/Cancel or Yes/No/Cancel pop up. It provides a shorthand for simple interactive dialog, that may be used to inform end user about taken action or asking about decision in some cases.\r\n            See below examples`,\r\n            example: GetPreivewWithoutCode(baseExample)\r\n        },\r\n        {\r\n            name: \"Options\",\r\n            description: `To create and show this component, call an event alert to alert-plugin and pass object that fills id, type and options containing title, message and callbacks:`,\r\n            list: [\r\n                { name: \"id\", description: \"element identifier, alse used in HTML DOM. Must be unique for different alert types.\" },\r\n                { name: \"type\", description: \"Info | OkCancel | YesNoCancel - creates dialog element that matches with layout and behaior to choosed type.\" },\r\n                { name: \"data\", description: \"object that keeps: title and message texts displayed in dialog. Also have number of callbacks that interact with alert: onOk, onCancel, onYes, onNo\" }\r\n            ],\r\n            hint: {\r\n                title: \"Keep id unique\",\r\n                content: \"cUI tries to reuse alert if possible so it is important to use the same id in calls that point the same part of the program.\"\r\n            },\r\n            example: getJsCodePreview(firstExample)\r\n        }\r\n    ]\r\n}","import * as React from \"react\";\r\nimport { getJsCodePreview } from \"../../components/preview/preview\";\r\nimport { ParserNode } from \"../../api/DocsElementParser/interfaces\";\r\nimport { DocsScript } from \"../../components/docs/base\";\r\n\r\nconst clickEventExample: ParserNode = {\r\n    tag: \"group\",\r\n    children: [\r\n        { tag: \"function\", text: \"onClick\", attributes: { ev: \"MouseEvent\" } },\r\n        { tag: \"text\", text: \"$cui.on('windowclick', onClick)\" }\r\n    ]\r\n}\r\n\r\nexport const CuiDocsClickScript: DocsScript = {\r\n    sections: [\r\n        {\r\n            name: \"Usage\",\r\n            description: <>Plugin is simply used for user click detection on the document.\r\n            It is used by some components to detect click outside of target element.\r\n            For example, component dialog uses this plugin for feature that closes component when user clicks outside of it.</>\r\n        },\r\n        {\r\n            name: \"Event\",\r\n            description: <>Plugin emits an event every times user performs click.\r\n            To attach to this event, use method <span className=\"style-class\">on</span> from cUI instance passing event name <span className=\"style-class\">windowclick</span> and callback:</>,\r\n            example: getJsCodePreview(clickEventExample)\r\n        }\r\n    ]\r\n}","import * as React from \"react\";\r\nimport { DocsScript } from \"../../components/docs/base\";\r\n\r\nexport const CuiDocsFocusScript: DocsScript = {\r\n    sections: [{\r\n        name: \"Usage\",\r\n        description: <>Plugin is used to detect current input source, whether it is a touch, mouse or keyboard.\r\n        Based on current input plugin sets class on a body element.\r\n        In fact, this plugin is used as a polyfill for <span className=\"style-class\">:focus-visible</span> component state.\r\n        Based on class set by this plugin, corresponding CSS component adds or remove additional styling for focus state in the domcument.</>\r\n    }, {\r\n        name: \"Initialization\",\r\n        description: <>During plugin initialization, you can pass class to be set on body for each type of input: </>,\r\n        list: [\r\n            { name: \"keybordClass\", description: \"\" },\r\n            { name: \"mouseClass\", description: \"\" },\r\n            { name: \"touchClass\", description: \"\" },\r\n        ]\r\n    }]\r\n}","import * as React from \"react\";\r\nimport { DocsScript } from \"src/components/docs/base\";\r\n\r\nexport const CuiDocsPluginsIntroScript: DocsScript = {\r\n    sections:\r\n        [\r\n            {\r\n                name: \"Plugins\",\r\n                description: <>Plugins provide extensions to cUI framework. They are initialized during framework initialization, provide features through all instance lifecycle and are destroyed during instance destruction.\r\n                cUI also exposes API to for plugins - more details can be found in documentation, section API. Main idea standing behind plugins is that they provide features, but framework shall work just fine when they are not included in the package.</>\r\n            }\r\n        ]\r\n}","import * as React from \"react\";\r\nimport { ParserNode } from \"../../api/DocsElementParser/interfaces\";\r\nimport { DocsScript } from \"../../components/docs/base\";\r\nimport { getJsCodePreview } from \"../../components/preview/preview\";\r\n\r\nconst example: ParserNode = {\r\n    tag: \"group\",\r\n    children: [\r\n        { tag: \"text\", text: \"import { ICuiKeyDownEvent } from './core/models/events'\" },\r\n        { tag: \"function\", text: \"onKeyDown\", attributes: { ev: \"ICuiKeyDownEvent\" } },\r\n        { tag: \"text\", text: \"$cui.on('keydown', onKeyDown);\" }\r\n    ]\r\n}\r\n\r\nexport const CuiDocsKeysScript: DocsScript = {\r\n    sections: [\r\n        {\r\n            name: \"Usage\",\r\n            description: <>Plugin captures keydown event globally and reemits it via event bus.\r\n            It is used by some components to capture whether user click certain key in order to take some action, e.g. closing a dialog.</>\r\n        },\r\n        {\r\n            name: \"Event\",\r\n            description: <>Plugin emits event <span className=\"style-class\">keydown</span>.\r\n            To attach to it use method <span className=\"style-class\">on</span> from cUI instance.\r\n            Event passes following data: </>,\r\n            list: [\r\n                { name: 'event', description: \"Keydown event\" },\r\n                { name: 'timestamp', description: \"Event timestamp\" },\r\n                { name: 'source', description: \"Event source\" },\r\n                { name: 'name', description: \"Event name\" },\r\n            ],\r\n            example: getJsCodePreview(example)\r\n        }\r\n    ]\r\n}","import * as React from \"react\";\r\nimport { DocsScript } from \"src/components/docs/base\";\r\n\r\nexport const CuiDocsAutoLightScript: DocsScript = {\r\n    sections: [\r\n        {\r\n            name: \"Usage\",\r\n            description: <>Plugin is used to detect system theme.\r\n            It automatically sets light/dark theme based on OS theme.\r\n            For detection it uses media query <span className=\"style-class\">(prefers-color-scheme: dark)</span>.\r\n            It is not supported on all operating systems so feature may not be reliable.</>\r\n        }\r\n    ]\r\n}","import * as React from \"react\";\r\nimport { getJsCodePreview } from \"../../components/preview/preview\";\r\nimport { ParserNode } from \"../../api/DocsElementParser/interfaces\";\r\nimport { DocsScript } from \"../../components/docs/base\";\r\n\r\nconst moveExample: ParserNode = {\r\n    tag: \"group\",\r\n    children: [\r\n        {\r\n            tag: \"text\",\r\n            text: \"import { ICuiMoveEvent } from './core/models/events'\"\r\n        },\r\n        {\r\n            tag: \"function\",\r\n            text: \"onMove\",\r\n            attributes: {\r\n                \"ev\": \"ICuiMoveEvent\"\r\n            }\r\n        },\r\n        {\r\n            tag: \"text\",\r\n            text: \"$cui.on('global-move', onMove)\"\r\n        }\r\n    ]\r\n}\r\n\r\nconst gestureExample: ParserNode = {\r\n    tag: \"group\",\r\n    children: [\r\n        {\r\n            tag: \"text\",\r\n            text: \"import { ICuiGestureEvent } from './core/models/events'\"\r\n        },\r\n        {\r\n            tag: \"function\",\r\n            text: \"onGesture\",\r\n            attributes: {\r\n                \"ev\": \"ICuiGestureEvent\"\r\n            }\r\n        },\r\n        {\r\n            tag: \"text\",\r\n            text: \"$cui.on('gesture-left', onGesture)\"\r\n        }\r\n    ]\r\n}\r\n\r\nexport const CuiDocsMovePluginScript: DocsScript = {\r\n    sections: [\r\n        {\r\n            name: \"Usage\",\r\n            description: <>Move plugin is used to detect mouse or touch movement on window.\r\n            It fires up an <span className=\"style-class\">global-move</span> event when user perform a move.\r\n            It is not a common mouse move operation. It starts detecting when user touches (or clicks) the window area.\r\n            After first move, it emits two events: first indicating touch down, second indicating move.\r\n            Then it emits an event every move until user releases touch or click. Last emit inidicates that release.\r\n            It may have variety of use cases in components for slider implementation.</>\r\n        },\r\n        {\r\n            name: \"Event\",\r\n            description: <>To attach to <span className=\"style-class\">global-move</span> event, you need to use method <span className=\"style-class\">on</span> from cUI instance and assign callback function.\r\n            Each event passes follwing data:\r\n            </>,\r\n            list: [\r\n                { name: \"x\", description: \"Pointer x position\" },\r\n                { name: \"y\", description: \"Pointer y position\" },\r\n                { name: \"moveX\", description: \"Indicates movementX\" },\r\n                { name: \"moveY\", description: \"Indicates movementY\" },\r\n                { name: \"type\", description: \"down | move | up\" },\r\n                { name: \"target\", description: \"Provides current event target\" },\r\n                { name: \"event\", description: \"Mouse or Touch event base\" },\r\n                { name: 'timestamp', description: \"Event timestamp\" },\r\n                { name: 'name', description: \"Event name\" },\r\n            ],\r\n            example: getJsCodePreview(moveExample)\r\n        },\r\n        {\r\n            name: \"Gestures\",\r\n            description: <>In addition to movement detection, plugin emits events related to simple swipe gestures.\r\n            When user releases touch or click, it calculates whether total move value passed condition for gesture and emits proper event.\r\n            Condition is calculated based on window height or width multiplied by ratio of 0.3, depending on swipe direction.\r\n            Function favourites horizontal gestures so if detects left or right swipe, it releases event immediately without checking vertical directions.\r\n            To attach for this event use method <span className=\"style-class\">on</span> from cUI instance and pass callback and one of following event names:</>,\r\n            list: [\r\n                { name: \"gesture-left\", description: \"\" },\r\n                { name: \"gesture-right\", description: \"\" },\r\n                { name: \"gesture-up\", description: \"\" },\r\n                { name: \"gesture-down\", description: \"\" }\r\n            ],\r\n            example: getJsCodePreview(gestureExample)\r\n        }\r\n    ]\r\n}\r\n\r\n/**\r\n *\r\n *  x: number;\r\n    y: number;\r\n    moveX: number;\r\n    moveY: number;\r\n    type: CuiMoveEventState;\r\n    target: EventTarget | null;\r\n    event: MouseEvent | TouchEvent;\r\n */","import * as React from \"react\";\r\nimport { ParserNode } from \"../../api/DocsElementParser/interfaces\";\r\nimport { getJsCodePreview, GetPreivewWithoutCode } from \"../../components/preview/preview\";\r\nimport { DocsScript } from \"../../components/docs/base\";\r\n\r\nconst firstExample: ParserNode = {\r\n    tag: \"group\",\r\n    children: [\r\n        {\r\n            tag: 'object',\r\n            text: `options`,\r\n            children: [\r\n                {\r\n                    tag: 'text',\r\n                    text: `id: \"id\",`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `title: \"Title\",`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `message: \"Message\",`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `auto: \"true\",`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `type: \"accent\" | \"secondary\" | \"error\" | \"warning\" | \"success\" | \"default\",`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `actions: [{ name: \"Name\", callback: () => void }]`\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            tag: \"text\",\r\n            text: `$cui.emit(\"notify\", \"~notification-plugin\", options)`\r\n        }\r\n\r\n    ]\r\n}\r\n\r\nconst baseExample: ParserNode = {\r\n    tag: \"div\",\r\n    children: [\r\n        { tag: \"button\", classes: [\"cui-button\"], text: \"Notify\", click: \"plugins:notify_base\" },\r\n        { tag: \"button\", classes: [\"cui-button\"], text: \"With description\", click: \"plugins:notify_description\" },\r\n        { tag: \"button\", classes: [\"cui-button\"], text: \"With action\", click: \"plugins:notify_action\" },\r\n        { tag: \"button\", classes: [\"cui-button\"], text: \"With type\", click: \"plugins:notify_type\" },\r\n        { tag: \"button\", classes: [\"cui-button\"], text: \"No self close\", click: \"plugins:notify_no_close\" },\r\n    ]\r\n}\r\n\r\nexport const CuiDocsNotificationScript: DocsScript = {\r\n    sections: [\r\n        {\r\n            name: \"Usage\",\r\n            description: <>Notifications bring floating elements to cUI. They provide variety of options including setting of additional message and actions.\r\n            It also comes with color options. Notifications can be styles with theme and signal colors. See examples below: </>,\r\n\r\n            example: GetPreivewWithoutCode(baseExample)\r\n        }, {\r\n            name: \"Options\",\r\n            description: <>To create notification, emit an event called <span className=\"style-class\">notify</span> to notification-plugin\r\n            and provde object with options described below:</>,\r\n            list: [\r\n                { name: \"id\", description: \"Notification id - must be unique\" },\r\n                { name: \"title\", description: \"Notification title - required\" },\r\n                { name: \"message\", description: \"Notification message - optional\" },\r\n                { name: \"type\", description: \"Notification type - optional - one of accent, secondary, error, warning, success\" },\r\n                { name: \"auto\", description: \"Turn off/on automatic close on notifiaction element - optional - must be strictly set to false to turn auto-close\" },\r\n                { name: \"actions\", description: \"List of actions with callback put on notification footer\" },\r\n            ],\r\n            example: getJsCodePreview(firstExample)\r\n        },\r\n        {\r\n            name: \"Events\",\r\n            description: <>For each showed notifiaction, plugin emits an event <span className=\"style-class\">notified</span> with the same data as received in received notify event.\r\n            Additionally it adds field <span className=\"style-element\">dissmissed</span> which holds information whether notification was closed by the user or automatically. Field type is boolean. It is set to true when user clicks close or action, false otherwise.</>\r\n        }\r\n    ]\r\n}","import { DocsScript } from \"src/components/docs/base\";\r\n\r\nexport const CuiDocsPrintScript: DocsScript = {\r\n    sections: [\r\n        {\r\n            name: \"Usage\",\r\n            description: `Plugin is used for automated detection of print mode in the document.\r\n            It sets cui-print class on the document body to enable reduced colors theme on all cUI elements.\r\n            Class is taken off once, browser goes off the print mode`\r\n        }\r\n    ]\r\n}","import * as React from \"react\";\r\nimport { ParserNode } from \"../../api/DocsElementParser/interfaces\";\r\nimport { DocsScript } from \"../../components/docs/base\";\r\nimport { getJsCodePreview } from \"../../components/preview/preview\";\r\n\r\nconst resizeExample: ParserNode = {\r\n    tag: \"group\",\r\n    children: [\r\n        {\r\n            tag: \"function\",\r\n            text: \"onResize\",\r\n            attributes: {\r\n                \"ev\": \"CuiResizeData\"\r\n            }\r\n        },\r\n        {\r\n            tag: \"text\",\r\n            text: \"$cui.on('resize', onResize)\"\r\n        }\r\n    ]\r\n}\r\n\r\nexport const CuiLightResizePluginDocs: DocsScript = {\r\n    sections: [\r\n        {\r\n            name: \"Usage\",\r\n            description: <>Plugin registers window resize observer that emits an event each time window size changes. It doesn't fire on each pixel change. It is emitted only on certain breakpoints, similar to these used in CSS for responsive components.\r\n            Observer supports four breakpoints:</>,\r\n            list: [\r\n                { name: \"none\", description: \"[< 640px] - returned for smallest screens\" },\r\n                { name: \"small\", description: \"[>= 640px] - returned for small screens\" },\r\n                { name: \"medium\", description: \"[>= 960px] - returned for medium screens\" },\r\n                { name: \"large\", description: \"[>= 1200px] - returned for large screens\" },\r\n                { name: \"xlarge\", description: \"[>= 1600px] - returned for largest screens\" },\r\n            ]\r\n        },\r\n        {\r\n            name: \"Initialization\",\r\n            description: <>Plugin constructor allows to set following properties during initialization:</>,\r\n            list: [\r\n                { name: \"resizeThreshold\", description: \"[performance] tells how often (in px) observer shall recalculate data during resize\" }\r\n            ]\r\n        },\r\n        {\r\n            name: \"Event\",\r\n            description: <>Plugin fires event <span className=\"style-class\">resize</span> globally with following data. To attach to this event use method on from cUI instance.</>,\r\n            list: [\r\n                { name: \"current\", description: \"Current window size\" },\r\n                { name: \"previous\", description: \"Previous window size\" },\r\n                { name: \"width\", description: \"Current window width\" },\r\n                { name: \"height\", description: \"Current window height\" },\r\n                { name: \"timestamp\", description: \"Event timestamp\" },\r\n                { name: \"name\", description: \"Event name\" },\r\n                { name: \"source\", description: \"Event source\" },\r\n            ],\r\n            example: getJsCodePreview(resizeExample),\r\n            hint: {\r\n                content: \"Event is called only when window is resizing, to get initial value of screen size call calcWindowSize(window.innerWidth) from module core/utils/functions\"\r\n            }\r\n        }\r\n    ]\r\n}","import * as React from \"react\";\r\nimport { ParserNode } from \"../../api/DocsElementParser/interfaces\";\r\nimport { DocsScript } from \"../../components/docs/base\";\r\nimport { getJsCodePreview, GetPreivewWithoutCode } from \"../../components/preview/preview\";\r\n\r\nconst showToast: ParserNode = {\r\n    tag: \"button\",\r\n    classes: ['cui-button', 'cui-default'],\r\n    text: \"Show Toast\",\r\n    click: \"plugins:toast\"\r\n}\r\n\r\nconst launchExample: ParserNode = {\r\n    tag: \"text\",\r\n    text: `window.$cui.emit(\"toast\", '~toast-plugin', \"Lorem ipsum\");`\r\n}\r\nexport const CuiDocsToastScript: DocsScript = {\r\n    sections: [\r\n        {\r\n            name: \"Usage\",\r\n            description: <>Plugin provides access to simple component which is displayed for short period of time on the bottom part of the screen.\r\n            It can show simple, short text data. It can be used to notify user about event occured in the app. </>,\r\n            example: GetPreivewWithoutCode(showToast)\r\n        },\r\n        {\r\n            name: \"Implementation\",\r\n            description: <>To call for toast use cUI event bus. Emit event <span className=\"style-class\">toast</span> with message to be displayed in element: </>,\r\n            example: getJsCodePreview(launchExample),\r\n            hint: {\r\n                title: \"Important\",\r\n                content: \"You can call only one toast at the time. If there is any toast showing on the screen, new calls will be ignored!\"\r\n            }\r\n        },\r\n    ]\r\n}","import { CuiDocsComponents } from \"../base\";\r\nimport { CuiDocsAlertScript } from \"./alert\";\r\nimport { CuiDocsClickScript } from \"./click\";\r\nimport { CuiDocsFocusScript } from \"./focus\";\r\nimport { CuiDocsPluginsIntroScript } from \"./introduction\";\r\nimport { CuiDocsKeysScript } from \"./keys\";\r\nimport { CuiDocsAutoLightScript } from \"./light\";\r\nimport { CuiDocsMovePluginScript } from \"./move\";\r\nimport { CuiDocsNotificationScript } from \"./notification\";\r\nimport { CuiDocsPrintScript } from \"./print\";\r\nimport { CuiLightResizePluginDocs } from \"./resize\";\r\nimport { CuiDocsToastScript } from \"./toast\";\r\n\r\nconst pluginsList: CuiDocsComponents = {\r\n    'introduction': { name: \"Introduction\", uri: '/docs/plugins/introduction', description: \"\", script: CuiDocsPluginsIntroScript },\r\n    'toast': { name: \"Toast\", uri: \"/docs/plugins/toast\", description: \"Shows lightweight information on the screen\", script: CuiDocsToastScript, tags: ['event', 'info', 'interactive'] },\r\n    \"alert\": { name: \"Alert\", uri: \"/docs/plugins/alert\", description: \"Easy to use, interactive dialog\", script: CuiDocsAlertScript, tags: ['modal', 'dialog', 'event'] },\r\n    'notification': { name: \"Notification\", uri: \"/docs/plugins/notification\", description: \"Adds support for notification to library\", script: CuiDocsNotificationScript, tags: ['color', 'theme', 'signal', 'event', 'interactive'] },\r\n    'resize': { name: \"Resize\", uri: \"/docs/plugins/resize\", description: \"Brings window resize observer\", script: CuiLightResizePluginDocs, tags: ['responsive', 'event'] },\r\n    'move': { name: \"Move\", uri: \"/docs/plugins/move\", description: \"Registers observer for global movement detection\", script: CuiDocsMovePluginScript, tags: ['gesture', 'slide', 'swipe'] },\r\n    'focus': { name: \"Focus\", uri: \"/docs/plugins/focus\", description: \"Detect input source for CSS focus\", script: CuiDocsFocusScript, tags: ['within', 'visible', 'input', 'form', 'highlight'] },\r\n    'light': { name: \"Auto light\", uri: \"/docs/plugins/light\", description: \"Automatically set theme based on system settings\", script: CuiDocsAutoLightScript, tags: ['theme', 'dark'] },\r\n    'print': { name: \"Print\", uri: \"/docs/plugins/print\", description: \"Automatically detects print mode and sets proper theme\", script: CuiDocsPrintScript },\r\n    'click': { name: \"Click\", uri: \"/docs/plugins/click\", description: \"Detects user click globally\", script: CuiDocsClickScript, tags: ['close', 'interactive'] },\r\n    'keys': { name: \"Keys\", uri: \"/docs/plugins/keys\", description: \"Detects keyboard clicks globally\", script: CuiDocsKeysScript, tags: ['close', 'interactive'] },\r\n}\r\n\r\nexport default pluginsList;","import { IElementGenerator, ITextParser, ParserNode } from \"./interfaces\";\r\n\r\nexport class ElementGenerator<T> implements IElementGenerator<T> {\r\n    #parser: ITextParser<T>;\r\n    constructor(parser: ITextParser<T>) {\r\n        this.#parser = parser;\r\n    }\r\n\r\n    build(data: ParserNode): T {\r\n        return this.#parser.parse(data, 0);\r\n    }\r\n}\r\n","import * as React from 'react'\r\nimport { ParserNode, ParserNodeAttribute } from '../../api/DocsElementParser/interfaces';\r\n\r\nexport interface preProps { \r\n    node: ParserNode;\r\n    level: number;\r\n}\r\n\r\ninterface ClasssesNodeProps { \r\n    classes: string[];\r\n}\r\n\r\ninterface AttributesNodeProps { \r\n    attributes: ParserNodeAttribute;\r\n}\r\n\r\n\r\n\r\nexport function PreNode(props: preProps) {\r\n    return (\r\n        <>\r\n            {\r\n                props.node.children && props.node.children.length > 0 ? \r\n                    <PreNodeWithChildren node={props.node} level={props.level} />\r\n                :\r\n                    <PreNodeWithoutChildren node={props.node} level={props.level}/>\r\n            }\r\n        </>);\r\n}\r\n\r\nexport function PreJsNode(pre: preProps) { \r\n    function create(pre: preProps): JSX.Element {\r\n        switch (pre.node.tag) { \r\n            case \"function\":\r\n                return createJsFunctionNode(pre)\r\n            case \"group\":\r\n                return createGroup(pre)\r\n            case \"object\":\r\n                return createObjectNode(pre);\r\n            default:\r\n                return createJsTextNode(pre.node, pre.level)\r\n        }\r\n    }\r\n        return (<>{create(pre)}</>)\r\n}\r\n\r\nfunction PreNodeWithoutChildren(props: preProps) { \r\n    return (<><span><span className={props.level > 0 ? \"cui-indent-\" + props.level : \"\"}>&lt;<span className=\"cui-tag\">{props.node.tag}</span>\r\n        <ClassesNode classes={props.node.classes} />\r\n        <AttributesNode attributes={props.node.attributes} />&gt;</span>\r\n        <span>{props.node.text}</span>\r\n        <span>&lt;/<span className=\"cui-tag\">{props.node.tag}</span>&gt;</span></span></>)\r\n}\r\n\r\nfunction PreNodeWithChildren(props: preProps) { \r\n    return (<><span><span className={props.level > 0 ? \"cui-indent-\" + props.level : \"\"}>&lt;<span className=\"cui-tag\">{props.node.tag}</span><ClassesNode classes={props.node.classes} /><AttributesNode attributes={props.node.attributes} />&gt;</span></span>\r\n            {\r\n                props.node.children && props.node.children.map((child: ParserNode, index: number) => {\r\n                    return <PreNode key={index} node={child} level={props.level + 1} />\r\n                })\r\n            }\r\n            <span><span className={props.level > 0 ? \"cui-indent-\" + props.level : \"\"}>&lt;/<span className=\"cui-tag\">{props.node.tag}</span>&gt;</span></span></>);\r\n}\r\n\r\nfunction ClassesNode(props: ClasssesNodeProps) { \r\n    let classesEl = props.classes ? (<span className=\"\">&nbsp;class=\"<span className=\"cui-var\">{props.classes.join(\" \")}</span>\"</span>) : \"\";\r\n    return (<>{classesEl}</>);\r\n}\r\n\r\nfunction AttributesNode(props: AttributesNodeProps) { \r\n    let attributesEl = props.attributes ? (enumerateAttributes(props.attributes)) : \"\";\r\n    function enumerateAttributes(attributes: ParserNodeAttribute) { \r\n        let arr = [];\r\n        for (let attr in attributes) { \r\n            arr.push((<span key={attr}>&nbsp;\r\n                {attr}=\"<span className=\"cui-var\">{attributes[attr]}</span>\"</span>))\r\n        }\r\n        return arr;\r\n    }\r\n    return (<>{attributesEl}</> );\r\n}\r\n\r\n// JS related\r\n\r\nfunction createJsTextNode(node: ParserNode, level: number) {\r\n    return <span><span className={level > 0 ? \"cui-indent-\" + level : \"\"}>{node.text}</span></span>;\r\n}\r\n\r\nfunction createJsFunctionNode(props: preProps) { \r\n    return (<><span><span className={props.level > 0 ? \"cui-indent-\" + props.level : undefined}>function <span className=\"cui-tag\">{props.node.text}</span>&#040;{functionArgs(props.node.attributes)}&#041; &#123;</span></span>\r\n        {\r\n            props.node.children && props.node.children.map((child: ParserNode, index: number) => {\r\n                return <PreJsNode key={index} node={child} level={props.level + 1} />\r\n            })\r\n        }\r\n        <span><span className={props.level > 0 ? \"cui-indent-\" + props.level : \"\"}>&#125;</span></span></>);\r\n}\r\n\r\nfunction createObjectNode(props: preProps) {\r\n    return (<><span><span className={props.level > 0 ? \"cui-indent-\" + props.level : undefined}>const <span className=\"cui-tag\">{props.node.text}</span> = &#123;</span></span>\r\n        {\r\n            props.node.children && props.node.children.map((child: ParserNode, index: number) => {\r\n                return <PreJsNode key={index} node={child} level={props.level + 1} />\r\n            })\r\n        }\r\n        <span><span className={props.level > 0 ? \"cui-indent-\" + props.level : \"\"}>&#125;</span></span></>);\r\n}\r\n\r\nfunction createGroup(props: preProps): JSX.Element { \r\n    return <>\r\n        {props.node.children.map((item, index) => { \r\n          return  <PreJsNode key={index} node={item} level={props.level} /> \r\n        })}\r\n    </>\r\n}\r\n\r\nfunction functionArgs(attr: ParserNodeAttribute) { \r\n     let attributesEl = attr && (enumerateAttributes(attr));\r\n    function enumerateAttributes(attributes: ParserNodeAttribute) { \r\n        let arr = [];\r\n        for (let attr in attributes) { \r\n            arr.push(\r\n                (<><span key={attr} className=\"cui-var\">{attr}</span><span>:{attributes[attr]}</span></>))\r\n        }\r\n\r\n        return arr;\r\n    }\r\n    let len = attributesEl ? attributesEl.length : 0;\r\n    return (<>{attributesEl.map((item: JSX.Element, index: number) => { \r\n        if (index < len - 1) {\r\n            return <>{item}, </>\r\n        }\r\n        return item\r\n    })}</> );\r\n}","import { count } from \"../utils/function\";\r\n\r\nexport const GLOBAL_COUNTER = count()","import { enumerate } from \"../../utils/function\";\r\n\r\nexport function createCallbackHandler<T>(init: ICuiCallbackHandlerInit<T>): CuiDocsCallbackHandler<T> {\r\n    const handler = new CuiDocsCallbackHandler<T>();\r\n    if (init) {\r\n        enumerate((key: string, value: ICuiDocsCallbacks<T>) => {\r\n            handler.addSingle({ prefix: key, callbacks: value })\r\n        }, init)\r\n    }\r\n    return handler;\r\n}\r\n\r\nexport class CuiDocsCallbackHandler<T> {\r\n    groups: ICuiCallbackGroup<T>[];\r\n    constructor() {\r\n        this.groups = [];\r\n    }\r\n\r\n    add(...groups: ICuiCallbackGroup<T>[]) {\r\n        if (!groups || groups.length === 0) {\r\n            return;\r\n        }\r\n        groups.forEach(g => this.addSingle(g))\r\n    }\r\n\r\n    addSingle(group: ICuiCallbackGroup<T>, replace?: boolean) {\r\n        if (!group || !group.prefix) {\r\n            return;\r\n        }\r\n        let idx = this.groups.findIndex(g => g.prefix === group.prefix)\r\n        if (idx < 0) {\r\n            this.groups.push(group)\r\n        }\r\n        if (replace === true) {\r\n            this.groups[idx] = group;\r\n        }\r\n    }\r\n\r\n    get(prefix: string): ICuiCallbackGroup<T> | undefined {\r\n        return prefix ? this.groups.find(g => g.prefix === prefix) : undefined;\r\n    }\r\n\r\n    call(name: string, ...args: T[]) {\r\n        let split = name.split(':');\r\n        if (split.length < 2) {\r\n            return;\r\n        }\r\n        let group = this.get(split[0].trim());\r\n        if (!group) {\r\n            return;\r\n        }\r\n        const callback = group.callbacks[split[1].trim()];\r\n        if (callback) {\r\n            callback(...args);\r\n        }\r\n    }\r\n\r\n}","import { createCallbackHandler } from \"./callbacks\";\r\n\r\nconst docsCallbacks = createCallbackHandler({\r\n    plugins: {\r\n        alert_info: () => {\r\n            const data = {\r\n                id: \"alert_base_dialog\",\r\n                type: \"Info\",\r\n                options: {\r\n                    title: \"Information\",\r\n                    message: \"Here is some message for the user\",\r\n                    onOk: () => {\r\n                        window.$cui.emit(\"toast\", '~toast-plugin', \"User confirmed\");\r\n                    }\r\n                }\r\n            }\r\n            window.$cui.emit(\"alert\", '~alert-plugin', data);\r\n        },\r\n        alert_ok_cancel: () => {\r\n            const data = {\r\n                id: \"alert_oc_dialog\",\r\n                type: \"OkCancel\",\r\n                options: {\r\n                    title: \"Confirm\",\r\n                    message: \"Here is some message for the user to confirm some action\",\r\n                    onOk: () => {\r\n                        window.$cui.emit(\"toast\", '~toast-plugin', \"User confirmed\");\r\n                    },\r\n                    onCancel: () => {\r\n                        window.$cui.emit(\"toast\", '~toast-plugin', \"User canceled\");\r\n                    }\r\n                }\r\n            }\r\n            window.$cui.emit(\"alert\", '~alert-plugin', data);\r\n        },\r\n        alert_yes_no_cancel: () => {\r\n            const data = {\r\n                id: \"alert_ync_dialog\",\r\n                type: \"YesNoCancel\",\r\n                options: {\r\n                    title: \"Decision\",\r\n                    message: \"Here is some message for the user to make some decision\",\r\n                    onYes: () => {\r\n                        window.$cui.emit(\"toast\", '~toast-plugin', \"User agreed\");\r\n                    },\r\n                    onNo: () => {\r\n                        window.$cui.emit(\"toast\", '~toast-plugin', \"User disagreed\");\r\n                    },\r\n                    onCancel: () => {\r\n                        window.$cui.emit(\"toast\", '~toast-plugin', \"User canceled\");\r\n                    }\r\n                }\r\n            }\r\n            window.$cui.emit(\"alert\", '~alert-plugin', data);\r\n        },\r\n        toast: () => {\r\n            window.$cui.emit(\"toast\", '~toast-plugin', \"Lorem ipsum\");\r\n        },\r\n        notify_base: () => {\r\n            window.$cui.emit(\"notify\", '~notification-plugin', {\r\n                id: 'notify-001' + Math.random(),\r\n                title: \"Notification\"\r\n            });\r\n        },\r\n        notify_description: () => {\r\n            window.$cui.emit(\"notify\", '~notification-plugin', {\r\n                id: 'notify-002' + Math.random(),\r\n                title: \"Notification\",\r\n                message: \"Notification message\"\r\n            });\r\n        },\r\n        notify_type: () => {\r\n            window.$cui.emit(\"notify\", '~notification-plugin', {\r\n                id: 'notify-003' + Math.random(),\r\n                title: \"Notification success\",\r\n                type: \"success\"\r\n            });\r\n        },\r\n        notify_action: () => {\r\n            window.$cui.emit(\"notify\", '~notification-plugin', {\r\n                id: 'notify-004' + Math.random(),\r\n                title: \"Notification\",\r\n                actions: [\r\n                    {\r\n                        name: \"Toast\",\r\n                        callback: () => {\r\n                            window.$cui.emit(\"toast\", '~toast-plugin', \"From notify\");\r\n                        }\r\n                    }\r\n                ]\r\n            });\r\n        },\r\n        notify_no_close: () => {\r\n            window.$cui.emit(\"notify\", '~notification-plugin', {\r\n                id: 'notify-005' + Math.random(),\r\n                title: \"No auto close\",\r\n                auto: false\r\n            });\r\n        }\r\n    }\r\n})\r\n\r\nexport default docsCallbacks;","import * as React from \"react\";\r\nimport { PreJsNode, PreNode } from \"../../components/partials/pre\";\r\nimport { GLOBAL_COUNTER } from \"../../statics/common\";\r\nimport { ITextParser, ParserNode } from \"./interfaces\";\r\nimport callbackHandler from \"../../statics/Callbacks/index\";\r\n\r\n// export class HTMLElementParser implements ITextParser<HTMLElement> {\r\n\r\n//     parse(node: ParserNode, level: number): HTMLElement {\r\n//         if (!node || !node.tag) {\r\n//             return undefined;\r\n//         }\r\n//         let element = document.createElement(node.tag)\r\n//         if (node.classes) {\r\n//             element.classList.add(...node.classes);\r\n//         }\r\n//         if (node.id) {\r\n//             element.id = node.id;\r\n//         }\r\n//         if (node.text) {\r\n//             element.textContent = node.text;\r\n//         }\r\n//         if (node.attributes) {\r\n//             for (let attribute in node.attributes) {\r\n//                 element.setAttribute(attribute, node.attributes[attribute]);\r\n//             }\r\n//         }\r\n//         if (node.children && node.children.length > 0) {\r\n//             node.children.forEach(child => {\r\n//                 element.appendChild(this.parse(child, level + 1))\r\n//             })\r\n\r\n//         }\r\n//         return element;\r\n//     }\r\n\r\n//     appendChildrens(element: HTMLElement, t: HTMLElement[]): HTMLElement {\r\n//         t.forEach(node => {\r\n//             element.appendChild(node);\r\n//         })\r\n//         return element;\r\n//     }\r\n\r\n// }\r\n\r\nexport class PreCodeParser implements ITextParser<HTMLElement> {\r\n    parse(node: ParserNode, level: number): HTMLElement {\r\n        let element = document.createElement(\"span\");\r\n        return element;\r\n    }\r\n\r\n    appendChildrens(element: HTMLElement, t: HTMLElement[]): HTMLElement {\r\n        t.forEach(node => {\r\n            element.appendChild(node);\r\n        })\r\n        return element;\r\n    }\r\n}\r\n\r\nexport class ReactParser implements ITextParser<any> {\r\n    parse(node: ParserNode, level: number): any {\r\n        let children: any[] = undefined;\r\n        let classes = node.classes ?? [];\r\n        let attributes = node.attributes ?? {};\r\n        let callback = undefined;\r\n        if (node.text) {\r\n\r\n            children = [node.text];\r\n        }\r\n        if (node.children) {\r\n            children = children ?? [];\r\n            node.children.forEach(child => {\r\n                children.push(this.parse(child, level + 1))\r\n            })\r\n        }\r\n        if (node.styleClass) {\r\n            classes.push(node.styleClass)\r\n        }\r\n\r\n        if (node.click) {\r\n            callback = () => {\r\n                callbackHandler.call(node.click)\r\n            }\r\n        }\r\n        return React.createElement(node.tag, {\r\n            className: classes.join(\" \"),\r\n            id: node.id,\r\n            key: node.tag + level + GLOBAL_COUNTER.next().value,\r\n            onClick: callback ? callback : undefined,\r\n            ...attributes\r\n        }, children)\r\n    }\r\n}\r\n\r\nexport class ReactPreParser implements ITextParser<any> {\r\n\r\n    parse(node: ParserNode, level: number) {\r\n        let arr = [];\r\n\r\n        if (node.text) {\r\n            arr.push(node.text)\r\n        }\r\n        return React.createElement(PreNode, { node: node, level: 0 });\r\n    }\r\n}\r\n\r\nexport class ReactJsParser implements ITextParser<JSX.Element> {\r\n    parse(node: ParserNode, level: number): JSX.Element {\r\n        return React.createElement(PreJsNode, { node: node, level: 0 })\r\n    }\r\n\r\n}","import * as React from \"react\";\r\nimport { ParserNode } from \"../../api/DocsElementParser/interfaces\";\r\nimport { ElementGenerator } from \"../../api/DocsElementParser/ElementGenerator\";\r\nimport { ReactPreParser, ReactParser, ReactJsParser } from \"../../api/DocsElementParser/GeneratorParsers\";\r\nimport { GLOBAL_COUNTER } from \"../../statics/common\";\r\n\r\nexport type CuiPreviewType = 'aside' | \"tabbed\";\r\n\r\nexport interface CodePreviewProps {\r\n    code: JSX.Element;\r\n    //  identification: string;\r\n    element: JSX.Element;\r\n    js?: JSX.Element;\r\n    height?: string;\r\n}\r\n\r\nexport interface JsCodePrevieProps {\r\n    js: JSX.Element;\r\n}\r\n\r\nexport interface TabbedPreviewProps {\r\n    node: ParserNode;\r\n}\r\n\r\nexport interface SimplePreviewProps {\r\n    element: JSX.Element;\r\n}\r\n\r\nexport function CodePreviewAside(props: CodePreviewProps) {\r\n    return (\r\n        <div className=\"cui-flex-grid cui-child-width-1-1 cui-child-width-1-2--s\">\r\n            <div>{props.element}</div>\r\n            <div className=\"cui-background-shade\">\r\n                <pre>{props.code}</pre>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function JsCodePreview(props: JsCodePrevieProps) {\r\n    return (\r\n        <div className=\"cui-code cui-format cui-line-counter\">\r\n            {props.js}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function SimplePreview(props: SimplePreviewProps) {\r\n    return (\r\n        <div className=\"cui-flex-center\">\r\n            {props.element}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function CodePreviewTabbed(props: CodePreviewProps) {\r\n    const identification = GLOBAL_COUNTER.next().value;\r\n    let tabId = \"tab-\" + identification;\r\n    let switchId = 'switch-' + identification;\r\n    let height = props.height ? \"; height:\" + props.height : \"\";\r\n    return (\r\n        <div className=\"\">\r\n            <ul className=\"cui-tab\" cui-switcher={`target: #${switchId}${height}`} id={tabId}>\r\n                <li><a href=\"#\">Preview</a></li>\r\n                {props.code && <li> <a href=\"#\">HTML</a></li>}\r\n                {props.js && <li> <a href=\"#\">Code</a></li>}\r\n            </ul>\r\n            <ul className=\"cui-switch cui-margin-top\" cui-switch={`links: #${tabId} > li${height}`} id={switchId}>\r\n                <li className=\"cui-active\"><div className=\"preview-wrapper\">{props.element}</div></li>\r\n                {props.code && <li>\r\n                    <div className=\"cui-code cui-format cui-line-counter cui-overflow-x-auto\">\r\n                        {props.code}\r\n                    </div>\r\n                </li>}\r\n                {props.js && <li>\r\n                    <div className=\"cui-code cui-format cui-line-counter\">\r\n                        {props.js}\r\n                    </div>\r\n                </li>}\r\n            </ul>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport function Preview(props: JsCodePrevieProps) {\r\n    return (\r\n        <div className=\"cui-code cui-format cui-line-counter\">\r\n            {props.js}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function ExamplePreview(props: CodePreviewProps, type: CuiPreviewType) {\r\n\r\n    switch (type) {\r\n        case \"aside\":\r\n            return <CodePreviewAside code={props.code} element={props.element} />;\r\n        default:\r\n            return <CodePreviewTabbed code={props.code} element={props.element} js={props.js} height={props.height} />;\r\n    }\r\n\r\n}\r\n\r\nexport function getJsCodePreview(node: ParserNode) {\r\n    return <JsCodePreview js={new ElementGenerator(new ReactJsParser()).build(node)} />\r\n}\r\n\r\nexport function GetTabbedPreview(node: ParserNode, height?: string) {\r\n    return ExamplePreview({\r\n        code: new ElementGenerator(new ReactPreParser()).build(node),\r\n        element: new ElementGenerator(new ReactParser()).build(node),\r\n        height: height\r\n    }, 'tabbed')\r\n}\r\n\r\nexport function GetTabbedPreviewWithJs(node: ParserNode, js: string, height?: string) {\r\n    return ExamplePreview({\r\n        code: node && new ElementGenerator(new ReactPreParser()).build(node),\r\n        element: node && new ElementGenerator(new ReactParser()).build(node),\r\n        js: <div>{js}</div>,\r\n        height: height\r\n    }, 'tabbed')\r\n}\r\n\r\nexport function GetPreivewWithoutCode(node: ParserNode) {\r\n    return SimplePreview({\r\n        element: new ElementGenerator(new ReactParser()).build(node),\r\n    })\r\n}"],"sourceRoot":""}