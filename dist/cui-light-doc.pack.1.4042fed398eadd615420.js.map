{"version":3,"sources":["webpack:///./src/statics/PluginDocs/alert.tsx","webpack:///./src/statics/PluginDocs/introduction.tsx","webpack:///./src/statics/PluginDocs/notification.tsx","webpack:///./src/statics/PluginDocs/toast.tsx","webpack:///./src/statics/PluginDocs/index.tsx","webpack:///./src/api/DocsElementParser/ElementGenerator.ts","webpack:///./src/components/partials/pre.tsx","webpack:///./src/statics/common.ts","webpack:///./src/statics/Callbacks/callbacks.tsx","webpack:///./src/statics/Callbacks/index.tsx","webpack:///./src/api/DocsElementParser/GeneratorParsers.ts","webpack:///./src/components/preview/preview.tsx"],"names":["firstExample","tag","children","text","CuiDocsAlertScript","sections","name","description","example","classes","click","list","hint","title","content","CuiDocsPluginsIntroScript","CuiDocsNotificationScript","className","launchExample","pluginsList","uri","script","ElementGenerator","parser","this","data","parse","PreNode","props","node","length","PreNodeWithChildren","level","PreNodeWithoutChildren","PreJsNode","pre","undefined","attr","attributesEl","attributes","arr","push","key","len","map","item","index","functionArgs","child","createGroup","createObjectNode","create","ClassesNode","AttributesNode","classesEl","join","GLOBAL_COUNTER","CuiDocsCallbackHandler","groups","forEach","g","addSingle","group","replace","prefix","idx","findIndex","find","args","split","get","trim","callback","callbacks","init","handler","value","createCallbackHandler","plugins","alert_info","id","type","options","message","onOk","window","$cui","emit","alert_ok_cancel","onCancel","alert_yes_no_cancel","onYes","onNo","toast","notify_base","Math","random","notify_description","notify_type","notify_action","actions","notify_no_close","auto","styleClass","call","next","onClick","CodePreviewAside","element","code","JsCodePreview","js","CodePreviewTabbed","identification","tabId","switchId","height","href","ExamplePreview","getJsCodePreview","build","GetTabbedPreview","GetPreivewWithoutCode"],"mappings":"4GAIA,MAAMA,EAA2B,CAC7BC,IAAK,QACLC,SAAU,CACN,CACID,IAAK,SACLE,KAAM,UACND,SAAU,CACN,CACID,IAAK,OACLE,KAAM,mBAEV,CACIF,IAAK,OACLE,KAAM,uBAEV,CACIF,IAAK,OACLE,KAAM,sCAEV,CACIF,IAAK,OACLE,KAAM,8CAEV,CACIF,IAAK,OACLE,KAAM,wCAEV,CACIF,IAAK,OACLE,KAAM,uCAIlB,CACIF,IAAK,SACLE,KAAM,OACND,SAAU,CACN,CACID,IAAK,OACLE,KAAM,aAEV,CACIF,IAAK,OACLE,KAAM,0CAEV,CACIF,IAAK,OACLE,KAAM,sBAIlB,CACIF,IAAK,OACLE,KAAM,+CAeLC,EAAiC,CAC1CC,SAAU,CACN,CACIC,KAAM,QACNC,YAAa,6RAEbC,QAAS,YAfW,CAC5BP,IAAK,MACLC,SAAU,CACN,CAAED,IAAK,SAAUQ,QAAS,CAAC,cAAeN,KAAM,OAAQO,MAAO,sBAC/D,CAAET,IAAK,SAAUQ,QAAS,CAAC,cAAeN,KAAM,WAAYO,MAAO,2BACnE,CAAET,IAAK,SAAUQ,QAAS,CAAC,cAAeN,KAAM,cAAeO,MAAO,mCAYtE,CACIJ,KAAM,UACNC,YAAa,kKACbI,KAAM,CACF,CAAEL,KAAM,KAAMC,YAAa,wFAC3B,CAAED,KAAM,OAAQC,YAAa,gHAC7B,CAAED,KAAM,OAAQC,YAAa,wJAEjCK,KAAM,CACFC,MAAO,iBACPC,QAAS,gIAEbN,QAAS,YAAiBR,M,WCzF/B,MAAMe,EAAwC,CACjDV,SACI,CACI,CACIC,KAAM,UACNC,YAAa,sdCHvB,EAA2B,CAC7BN,IAAK,QACLC,SAAU,CACN,CACID,IAAK,SACLE,KAAM,UACND,SAAU,CACN,CACID,IAAK,OACLE,KAAM,aAEV,CACIF,IAAK,OACLE,KAAM,mBAEV,CACIF,IAAK,OACLE,KAAM,uBAEV,CACIF,IAAK,OACLE,KAAM,iBAEV,CACIF,IAAK,OACLE,KAAM,+EAEV,CACIF,IAAK,OACLE,KAAM,uDAIlB,CACIF,IAAK,OACLE,KAAM,0DAiBLa,EAAwC,CACjDX,SAAU,CACN,CACIC,KAAM,QACNC,YAAa,uRAGbC,QAAS,YAlBW,CAC5BP,IAAK,MACLC,SAAU,CACN,CAAED,IAAK,SAAUQ,QAAS,CAAC,cAAeN,KAAM,SAAUO,MAAO,uBACjE,CAAET,IAAK,SAAUQ,QAAS,CAAC,cAAeN,KAAM,mBAAoBO,MAAO,8BAC3E,CAAET,IAAK,SAAUQ,QAAS,CAAC,cAAeN,KAAM,cAAeO,MAAO,yBACtE,CAAET,IAAK,SAAUQ,QAAS,CAAC,cAAeN,KAAM,YAAaO,MAAO,uBACpE,CAAET,IAAK,SAAUQ,QAAS,CAAC,cAAeN,KAAM,gBAAiBO,MAAO,+BAYrE,CACCJ,KAAM,UACNC,YAAa,gC,gDAA+C,wBAAMU,UAAU,eAAa,U,2EAEzFN,KAAM,CACF,CAAEL,KAAM,KAAMC,YAAa,oCAC3B,CAAED,KAAM,QAASC,YAAa,iCAC9B,CAAED,KAAM,UAAWC,YAAa,mCAChC,CAAED,KAAM,OAAQC,YAAa,oFAC7B,CAAED,KAAM,OAAQC,YAAa,qHAC7B,CAAED,KAAM,UAAWC,YAAa,6DAEpCC,QAAS,YAAiB,IAE9B,CACIF,KAAM,SACNC,YAAa,gC,uDAAsD,wBAAMU,UAAU,eAAa,Y,wFACrE,wBAAMA,UAAU,iBAAe,c,yLCtEhEC,EAA4B,CAC9BjB,IAAK,OACLE,KAAM,gECRJgB,EAAiC,CACnC,aAAgB,CAAEb,KAAM,eAAgBc,IAAK,6BAA8Bb,YAAa,GAAIc,OAAQN,GACpG,MAAS,CAAET,KAAM,QAASc,IAAK,sBAAuBb,YAAa,8CAA+Cc,ODQxE,CAC1ChB,SAAU,CACN,CACIC,KAAM,QACNC,YAAa,gQAEbC,QAAS,YAjBS,CAC1BP,IAAK,SACLQ,QAAS,CAAC,aAAc,eACxBN,KAAM,aACNO,MAAO,mBAeH,CACIJ,KAAM,iBACNC,YAAa,gC,mDAAkD,wBAAMU,UAAU,eAAa,S,8CAC5FT,QAAS,YAAiBU,GAC1BN,KAAM,CACFC,MAAO,YACPC,QAAS,wHCrBrB,MAAS,CAAER,KAAM,QAASc,IAAK,sBAAuBb,YAAa,kCAAmCc,OAAQjB,GAC9G,aAAgB,CAAEE,KAAM,eAAgBc,IAAK,6BAA8Bb,YAAa,2CAA4Cc,OAAQL,IAGjI,a,maCXR,MAAMM,EAET,YAAYC,GADZ,mBAEI,EAAAC,KAAI,EAAWD,GAGnB,MAAME,GACF,OAAO,EAAAD,KAAA,GAAaE,MAAMD,EAAM,ICSjC,SAASE,EAAQC,GACpB,OACI,gCAEQA,EAAMC,KAAK3B,UAAY0B,EAAMC,KAAK3B,SAAS4B,OAAS,EAChD,gBAACC,EAAmB,CAACF,KAAMD,EAAMC,KAAMG,MAAOJ,EAAMI,QAEpD,gBAACC,EAAsB,CAACJ,KAAMD,EAAMC,KAAMG,MAAOJ,EAAMI,SAKpE,SAASE,EAAUC,GAalB,OAAQ,gCAZZ,SAAgBA,GACZ,OAAQA,EAAIN,KAAK5B,KACb,IAAK,WACD,OAsDc2B,EAtDcO,EAuDhC,gCAAE,4BAAM,wBAAMlB,UAAWW,EAAMI,MAAQ,EAAI,cAAgBJ,EAAMI,WAAQI,G,YAAoB,wBAAMnB,UAAU,WAAWW,EAAMC,KAAK1B,M,IA2B/I,SAAsBkC,GACjB,IAAIC,EAAeD,GACpB,SAA6BE,GACzB,IAAIC,EAAM,GACV,IAAK,IAAIH,KAAQE,EACbC,EAAIC,KACC,gCAAE,wBAAMC,IAAKL,EAAMpB,UAAU,WAAWoB,GAAY,4B,IAAQE,EAAWF,MAGhF,OAAOG,EARiB,CAAqBH,GAU7CM,EAAML,EAAeA,EAAaR,OAAS,EAC/C,OAAQ,gCAAGQ,EAAaM,IAAI,CAACC,EAAmBC,IACxCA,EAAQH,EAAM,EACP,gCAAGE,E,MAEPA,IA3CmJE,CAAanB,EAAMC,KAAKU,Y,QAE9KX,EAAMC,KAAK3B,UAAY0B,EAAMC,KAAK3B,SAAS0C,IAAI,CAACI,EAAmBF,IACxD,gBAACZ,EAAS,CAACQ,IAAKI,EAAOjB,KAAMmB,EAAOhB,MAAOJ,EAAMI,MAAQ,KAGxE,4BAAM,wBAAMf,UAAWW,EAAMI,MAAQ,EAAI,cAAgBJ,EAAMI,MAAQ,IAAE,OA5DrE,IAAK,QACD,OAwEhB,SAAqBJ,GACjB,OAAO,gCACFA,EAAMC,KAAK3B,SAAS0C,IAAI,CAACC,EAAMC,IACtB,gBAACZ,EAAS,CAACQ,IAAKI,EAAOjB,KAAMgB,EAAMb,MAAOJ,EAAMI,UA3E3CiB,CAAYd,GACvB,IAAK,SACD,OA4DhB,SAA0BP,GACtB,OAAQ,gCAAE,4BAAM,wBAAMX,UAAWW,EAAMI,MAAQ,EAAI,cAAgBJ,EAAMI,WAAQI,G,SAAiB,wBAAMnB,UAAU,WAAWW,EAAMC,KAAK1B,M,SAEhIyB,EAAMC,KAAK3B,UAAY0B,EAAMC,KAAK3B,SAAS0C,IAAI,CAACI,EAAmBF,IACxD,gBAACZ,EAAS,CAACQ,IAAKI,EAAOjB,KAAMmB,EAAOhB,MAAOJ,EAAMI,MAAQ,KAGxE,4BAAM,wBAAMf,UAAWW,EAAMI,MAAQ,EAAI,cAAgBJ,EAAMI,MAAQ,IAAE,OAnE1DkB,CAAiBf,GAC5B,QACI,OA4CUN,EA5CcM,EAAIN,KA4CAG,EA5CMG,EAAIH,MA6C3C,4BAAM,wBAAMf,UAAWe,EAAQ,EAAI,cAAgBA,EAAQ,IAAKH,EAAK1B,OADhF,IAA0B0B,EAAkBG,EAIdJ,EA7CXuB,CAAOhB,IAG1B,SAASF,EAAuBL,GAC5B,OAAQ,gCAAE,4BAAM,wBAAMX,UAAWW,EAAMI,MAAQ,EAAI,cAAgBJ,EAAMI,MAAQ,I,IAAQ,wBAAMf,UAAU,WAAWW,EAAMC,KAAK5B,KAC3H,gBAACmD,EAAW,CAAC3C,QAASmB,EAAMC,KAAKpB,UACjC,gBAAC4C,EAAc,CAACd,WAAYX,EAAMC,KAAKU,a,KACvC,4BAAOX,EAAMC,KAAK1B,MAClB,4B,KAAW,wBAAMc,UAAU,WAAWW,EAAMC,KAAK5B,K,OAGzD,SAAS8B,EAAoBH,GACzB,OAAQ,gCAAE,4BAAM,wBAAMX,UAAWW,EAAMI,MAAQ,EAAI,cAAgBJ,EAAMI,MAAQ,I,IAAQ,wBAAMf,UAAU,WAAWW,EAAMC,KAAK5B,KAAW,gBAACmD,EAAW,CAAC3C,QAASmB,EAAMC,KAAKpB,UAAW,gBAAC4C,EAAc,CAACd,WAAYX,EAAMC,KAAKU,a,MAEjNX,EAAMC,KAAK3B,UAAY0B,EAAMC,KAAK3B,SAAS0C,IAAI,CAACI,EAAmBF,IACxD,gBAACnB,EAAO,CAACe,IAAKI,EAAOjB,KAAMmB,EAAOhB,MAAOJ,EAAMI,MAAQ,KAGtE,4BAAM,wBAAMf,UAAWW,EAAMI,MAAQ,EAAI,cAAgBJ,EAAMI,MAAQ,I,KAAS,wBAAMf,UAAU,WAAWW,EAAMC,KAAK5B,K,OAGlI,SAASmD,EAAYxB,GACjB,IAAI0B,EAAY1B,EAAMnB,QAAW,wBAAMQ,UAAU,I,WAAgB,wBAAMA,UAAU,WAAWW,EAAMnB,QAAQ8C,KAAK,M,KAAwB,GACvI,OAAQ,gCAAGD,GAGf,SAASD,EAAezB,GACpB,IAAIU,EAAeV,EAAMW,WACzB,SAA6BA,GACzB,IAAIC,EAAM,GACV,IAAK,IAAIH,KAAQE,EACbC,EAAIC,KAAM,wBAAMC,IAAKL,G,IAChBA,E,KAAO,wBAAMpB,UAAU,WAAWsB,EAAWF,I,MAEtD,OAAOG,EAP2B,CAAqBZ,EAAMW,YAAe,GAShF,OAAQ,gCAAGD,G,0BC7ER,MAAMkB,EAAiB,cCUvB,MAAMC,EAET,cACIjC,KAAKkC,OAAS,GAGlB,OAAOA,GACEA,GAA4B,IAAlBA,EAAO5B,QAGtB4B,EAAOC,QAAQC,GAAKpC,KAAKqC,UAAUD,IAGvC,UAAUE,EAA6BC,GACnC,IAAKD,IAAUA,EAAME,OACjB,OAEJ,IAAIC,EAAMzC,KAAKkC,OAAOQ,UAAUN,GAAKA,EAAEI,SAAWF,EAAME,QACpDC,EAAM,GACNzC,KAAKkC,OAAOjB,KAAKqB,IAEL,IAAZC,IACAvC,KAAKkC,OAAOO,GAAOH,GAI3B,IAAIE,GACA,OAAOA,EAASxC,KAAKkC,OAAOS,KAAKP,GAAKA,EAAEI,SAAWA,QAAU5B,EAGjE,KAAK9B,KAAiB8D,GAClB,IAAIC,EAAQ/D,EAAK+D,MAAM,KACvB,GAAIA,EAAMvC,OAAS,EACf,OAEJ,IAAIgC,EAAQtC,KAAK8C,IAAID,EAAM,GAAGE,QAC9B,IAAKT,EACD,OAEJ,MAAMU,EAAWV,EAAMW,UAAUJ,EAAM,GAAGE,QACtCC,GACAA,KAAYJ,ICiDT,MDpGR,SAAkCM,GACrC,MAAMC,EAAU,IAAIlB,EAMpB,OALIiB,GACA,YAAU,CAAChC,EAAakC,KACpBD,EAAQd,UAAU,CAAEG,OAAQtB,EAAK+B,UAAWG,KAC7CF,GAEAC,ECPWE,CAAsB,CACxCC,QAAS,CACLC,WAAY,KACR,MAAMtD,EAAO,CACTuD,GAAI,oBACJC,KAAM,OACNC,QAAS,CACLrE,MAAO,cACPsE,QAAS,oCACTC,KAAM,KACFC,OAAOC,KAAKC,KAAK,QAAS,gBAAiB,qBAIvDF,OAAOC,KAAKC,KAAK,QAAS,gBAAiB9D,IAE/C+D,gBAAiB,KACb,MAAM/D,EAAO,CACTuD,GAAI,kBACJC,KAAM,WACNC,QAAS,CACLrE,MAAO,UACPsE,QAAS,2DACTC,KAAM,KACFC,OAAOC,KAAKC,KAAK,QAAS,gBAAiB,mBAE/CE,SAAU,KACNJ,OAAOC,KAAKC,KAAK,QAAS,gBAAiB,oBAIvDF,OAAOC,KAAKC,KAAK,QAAS,gBAAiB9D,IAE/CiE,oBAAqB,KACjB,MAAMjE,EAAO,CACTuD,GAAI,mBACJC,KAAM,cACNC,QAAS,CACLrE,MAAO,WACPsE,QAAS,0DACTQ,MAAO,KACHN,OAAOC,KAAKC,KAAK,QAAS,gBAAiB,gBAE/CK,KAAM,KACFP,OAAOC,KAAKC,KAAK,QAAS,gBAAiB,mBAE/CE,SAAU,KACNJ,OAAOC,KAAKC,KAAK,QAAS,gBAAiB,oBAIvDF,OAAOC,KAAKC,KAAK,QAAS,gBAAiB9D,IAE/CoE,MAAO,KACHR,OAAOC,KAAKC,KAAK,QAAS,gBAAiB,gBAE/CO,YAAa,KACTT,OAAOC,KAAKC,KAAK,SAAU,uBAAwB,CAC/CP,GAAI,aAAee,KAAKC,SACxBnF,MAAO,kBAGfoF,mBAAoB,KAChBZ,OAAOC,KAAKC,KAAK,SAAU,uBAAwB,CAC/CP,GAAI,aAAee,KAAKC,SACxBnF,MAAO,eACPsE,QAAS,0BAGjBe,YAAa,KACTb,OAAOC,KAAKC,KAAK,SAAU,uBAAwB,CAC/CP,GAAI,aAAee,KAAKC,SACxBnF,MAAO,uBACPoE,KAAM,aAGdkB,cAAe,KACXd,OAAOC,KAAKC,KAAK,SAAU,uBAAwB,CAC/CP,GAAI,aAAee,KAAKC,SACxBnF,MAAO,eACPuF,QAAS,CACL,CACI9F,KAAM,QACNkE,SAAU,KACNa,OAAOC,KAAKC,KAAK,QAAS,gBAAiB,qBAM/Dc,gBAAiB,KACbhB,OAAOC,KAAKC,KAAK,SAAU,uBAAwB,CAC/CP,GAAI,aAAee,KAAKC,SACxBnF,MAAO,gBACPyF,MAAM,QCrCf,MAAM,EACT,MAAMzE,EAAkBG,G,QACpB,IAAI9B,OAAkBkC,EAClB3B,EAAsB,QAAf,EAAGoB,EAAKpB,eAAO,QAAI,GAC1B8B,EAA4B,QAAlB,EAAGV,EAAKU,kBAAU,QAAI,GAChCiC,OAAWpC,EAoBf,OAnBIP,EAAK1B,OAELD,EAAW,CAAC2B,EAAK1B,OAEjB0B,EAAK3B,WACLA,EAAWA,UAAY,GACvB2B,EAAK3B,SAASyD,QAAQX,IAClB9C,EAASuC,KAAKjB,KAAKE,MAAMsB,EAAOhB,EAAQ,OAG5CH,EAAK0E,YACL9F,EAAQgC,KAAKZ,EAAK0E,YAGlB1E,EAAKnB,QACL8D,EAAW,KACP,EAAgBgC,KAAK3E,EAAKnB,SAG3B,gBAAoBmB,EAAK5B,IAAK,OAAF,QAC/BgB,UAAWR,EAAQ8C,KAAK,KACxByB,GAAInD,EAAKmD,GACTtC,IAAKb,EAAK5B,IAAM+B,EAAQwB,EAAeiD,OAAO7B,MAC9C8B,QAASlC,QAAsBpC,GAC5BG,GACJrC,IAIJ,MAAM,EAET,MAAM2B,EAAkBG,GACpB,IAAIQ,EAAM,GAKV,OAHIX,EAAK1B,MACLqC,EAAIC,KAAKZ,EAAK1B,MAEX,gBAAoBwB,EAAS,CAAEE,KAAMA,EAAMG,MAAO,KAI1D,MAAM,EACT,MAAMH,EAAkBG,GACpB,OAAO,gBAAoBE,EAAW,CAAEL,KAAMA,EAAMG,MAAO,KChF5D,SAAS2E,EAAiB/E,GAC7B,OACI,uBAAKX,UAAU,4DACX,2BAAMW,EAAMgF,SACZ,uBAAK3F,UAAU,wBACX,2BAAMW,EAAMiF,QAMrB,SAASC,EAAclF,GAC1B,OACI,uBAAKX,UAAU,wCACVW,EAAMmF,IAaZ,SAASC,EAAkBpF,GAC9B,MAAMqF,EAAiBzD,EAAeiD,OAAO7B,MAC7C,IAAIsC,EAAQ,OAASD,EACjBE,EAAW,UAAYF,EACvBG,EAASxF,EAAMwF,OAAS,YAAcxF,EAAMwF,OAAS,GACzD,OACI,uBAAKnG,UAAU,IACX,sBAAIA,UAAU,UAAS,eAAe,YAAYkG,IAAWC,IAAUpC,GAAIkC,GACvE,0BAAI,qBAAGG,KAAK,KAAG,YACdzF,EAAMiF,MAAQ,0B,IAAK,qBAAGQ,KAAK,KAAG,SAC9BzF,EAAMmF,IAAM,0B,IAAK,qBAAGM,KAAK,KAAG,UAEjC,sBAAIpG,UAAU,4BAA2B,aAAa,WAAWiG,SAAaE,IAAUpC,GAAImC,GACxF,sBAAIlG,UAAU,cAAa,uBAAKA,UAAU,mBAAmBW,EAAMgF,UAClEhF,EAAMiF,MAAQ,0BACX,uBAAK5F,UAAU,4DACVW,EAAMiF,OAGdjF,EAAMmF,IAAM,0BACT,uBAAK9F,UAAU,wCACVW,EAAMmF,OAgBxB,SAASO,EAAe1F,EAAyBqD,GAEpD,OAAQA,GACJ,IAAK,QACD,OAAO,gBAAC0B,EAAgB,CAACE,KAAMjF,EAAMiF,KAAMD,QAAShF,EAAMgF,UAC9D,QACI,OAAO,gBAACI,EAAiB,CAACH,KAAMjF,EAAMiF,KAAMD,QAAShF,EAAMgF,QAASG,GAAInF,EAAMmF,GAAIK,OAAQxF,EAAMwF,UAKrG,SAASG,EAAiB1F,GAC7B,OAAO,gBAACiF,EAAa,CAACC,GAAI,IAAIzF,EAAiB,IAAI,GAAiBkG,MAAM3F,KAGvE,SAAS4F,EAAiB5F,EAAkBuF,GAC/C,OAAOE,EAAe,CAClBT,KAAM,IAAIvF,EAAiB,IAAI,GAAkBkG,MAAM3F,GACvD+E,QAAS,IAAItF,EAAiB,IAAI,GAAekG,MAAM3F,GACvDuF,OAAQA,GACT,UAYA,SAASM,EAAsB7F,GAClC,OA9E0BD,EA8EL,CACjBgF,QAAS,IAAItF,EAAiB,IAAI,GAAekG,MAAM3F,IA7EvD,uBAAKZ,UAAU,mBACVW,EAAMgF,SAHZ,IAAuBhF","file":"cui-light-doc.pack.1.4042fed398eadd615420.js","sourcesContent":["import { ParserNode } from \"../../api/DocsElementParser/interfaces\";\r\nimport { DocsScript } from \"../../components/docs/base\";\r\nimport { getJsCodePreview, GetPreivewWithoutCode } from \"../../components/preview/preview\";\r\n\r\nconst firstExample: ParserNode = {\r\n    tag: \"group\",\r\n    children: [\r\n        {\r\n            tag: 'object',\r\n            text: `options`,\r\n            children: [\r\n                {\r\n                    tag: 'text',\r\n                    text: `title: \"Title\",`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `message: \"Message\",`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `onOk: () => { console.log(\"Ok\") },`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `onCancel: () => { console.log(\"Cancel\") },`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `onYes: () => { console.log(\"Yes\") },`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `onNo: () => { console.log(\"No\") }`\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            tag: 'object',\r\n            text: `data`,\r\n            children: [\r\n                {\r\n                    tag: 'text',\r\n                    text: `id: \"id\",`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `type: \"Info | OkCancel | YesNoCancel\",`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `options: options`\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            tag: \"text\",\r\n            text: `$cui.emit(\"alert\", \"~alert-plugin\", data)`\r\n        }\r\n\r\n    ]\r\n}\r\n\r\nconst baseExample: ParserNode = {\r\n    tag: \"div\",\r\n    children: [\r\n        { tag: \"button\", classes: [\"cui-button\"], text: \"Info\", click: \"plugins:alert_info\" },\r\n        { tag: \"button\", classes: [\"cui-button\"], text: \"OkCancel\", click: \"plugins:alert_ok_cancel\" },\r\n        { tag: \"button\", classes: [\"cui-button\"], text: \"YesNoCancel\", click: \"plugins:alert_yes_no_cancel\" },\r\n    ]\r\n}\r\n\r\nexport const CuiDocsAlertScript: DocsScript = {\r\n    sections: [\r\n        {\r\n            name: \"Usage\",\r\n            description: `Alert is a special type of dialog. It can be used as information, Ok/Cancel or Yes/No/Cancel pop up. It provides a shorthand for simple interactive dialog, that may be used to inform end user about taken action or asking about decision in some cases.\r\n            See below examples`,\r\n            example: GetPreivewWithoutCode(baseExample)\r\n        },\r\n        {\r\n            name: \"Options\",\r\n            description: `To create and show this component, call an event alert to alert-plugin and pass object that fills id, type and options containing title, message and callbacks:`,\r\n            list: [\r\n                { name: \"id\", description: \"element identifier, alse used in HTML DOM. Must be unique for different alert types.\" },\r\n                { name: \"type\", description: \"Info | OkCancel | YesNoCancel - creates dialog element that matches with layout and behaior to choosed type.\" },\r\n                { name: \"data\", description: \"object that keeps: title and message texts displayed in dialog. Also have number of callbacks that interact with alert: onOk, onCancel, onYes, onNo\" }\r\n            ],\r\n            hint: {\r\n                title: \"Keep id unique\",\r\n                content: \"cUI tries to reuse alert if possible so it is important to use the same id in calls that point the same part of the program.\"\r\n            },\r\n            example: getJsCodePreview(firstExample)\r\n        }\r\n    ]\r\n}","import * as React from \"react\";\r\nimport { DocsScript } from \"src/components/docs/base\";\r\n\r\nexport const CuiDocsPluginsIntroScript: DocsScript = {\r\n    sections:\r\n        [\r\n            {\r\n                name: \"Plugins\",\r\n                description: <>Plugins provide extensions to cUI framework. They are initialized during framework initialization, provide features through all instance lifecycle and are destroyed during instance destruction.\r\n                cUI also exposes API to for plugins - more details can be found in documentation, section API. Main idea standing behind plugins is that they provide features, but framework shall work just fine when they are not included in the package.</>\r\n            }\r\n        ]\r\n}","import * as React from \"react\";\r\nimport { ParserNode } from \"../../api/DocsElementParser/interfaces\";\r\nimport { getJsCodePreview, GetPreivewWithoutCode } from \"../../components/preview/preview\";\r\nimport { DocsScript } from \"../../components/docs/base\";\r\n\r\nconst firstExample: ParserNode = {\r\n    tag: \"group\",\r\n    children: [\r\n        {\r\n            tag: 'object',\r\n            text: `options`,\r\n            children: [\r\n                {\r\n                    tag: 'text',\r\n                    text: `id: \"id\",`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `title: \"Title\",`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `message: \"Message\",`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `auto: \"true\",`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `type: \"accent\" | \"secondary\" | \"error\" | \"warning\" | \"success\" | \"default\",`\r\n                },\r\n                {\r\n                    tag: 'text',\r\n                    text: `actions: [{ name: \"Name\", callback: () => void }]`\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            tag: \"text\",\r\n            text: `$cui.emit(\"notify\", \"~notification-plugin\", options)`\r\n        }\r\n\r\n    ]\r\n}\r\n\r\nconst baseExample: ParserNode = {\r\n    tag: \"div\",\r\n    children: [\r\n        { tag: \"button\", classes: [\"cui-button\"], text: \"Notify\", click: \"plugins:notify_base\" },\r\n        { tag: \"button\", classes: [\"cui-button\"], text: \"With description\", click: \"plugins:notify_description\" },\r\n        { tag: \"button\", classes: [\"cui-button\"], text: \"With action\", click: \"plugins:notify_action\" },\r\n        { tag: \"button\", classes: [\"cui-button\"], text: \"With type\", click: \"plugins:notify_type\" },\r\n        { tag: \"button\", classes: [\"cui-button\"], text: \"No self close\", click: \"plugins:notify_no_close\" },\r\n    ]\r\n}\r\n\r\nexport const CuiDocsNotificationScript: DocsScript = {\r\n    sections: [\r\n        {\r\n            name: \"Usage\",\r\n            description: <>Notifications bring floating elements to cUI. They provide variety of options including setting of additional message and actions.\r\n            It also comes with color options. Notifications can be styles with theme and signal colors. See examples below: </>,\r\n\r\n            example: GetPreivewWithoutCode(baseExample)\r\n        }, {\r\n            name: \"Options\",\r\n            description: <>To create notification, emit an event called <span className=\"style-class\">notify</span> to notification-plugin\r\n            and provde object with options described below:</>,\r\n            list: [\r\n                { name: \"id\", description: \"Notification id - must be unique\" },\r\n                { name: \"title\", description: \"Notification title - required\" },\r\n                { name: \"message\", description: \"Notification message - optional\" },\r\n                { name: \"type\", description: \"Notification type - optional - one of accent, secondary, error, warning, success\" },\r\n                { name: \"auto\", description: \"Turn off/on automatic close on notifiaction element - optional - must be strictly set to false to turn auto-close\" },\r\n                { name: \"actions\", description: \"List of actions with callback put on notification footer\" },\r\n            ],\r\n            example: getJsCodePreview(firstExample)\r\n        },\r\n        {\r\n            name: \"Events\",\r\n            description: <>For each showed notifiaction, plugin emits an event <span className=\"style-class\">notified</span> with the same data as received in received notify event.\r\n            Additionally it adds field <span className=\"style-element\">dissmissed</span> which holds information whether notification was closed by the user or automatically. Field type is boolean. It is set to true when user clicks close or action, false otherwise.</>\r\n        }\r\n    ]\r\n}","import * as React from \"react\";\r\nimport { ParserNode } from \"../../api/DocsElementParser/interfaces\";\r\nimport { DocsScript } from \"../../components/docs/base\";\r\nimport { getJsCodePreview, GetPreivewWithoutCode } from \"../../components/preview/preview\";\r\n\r\nconst showToast: ParserNode = {\r\n    tag: \"button\",\r\n    classes: ['cui-button', 'cui-default'],\r\n    text: \"Show Toast\",\r\n    click: \"plugins:toast\"\r\n}\r\n\r\nconst launchExample: ParserNode = {\r\n    tag: \"text\",\r\n    text: `window.$cui.emit(\"toast\", '~toast-plugin', \"Lorem ipsum\");`\r\n}\r\nexport const CuiDocsToastScript: DocsScript = {\r\n    sections: [\r\n        {\r\n            name: \"Usage\",\r\n            description: <>Plugin provides access to simple component which is displayed for short period of time on the bottom part of the screen.\r\n            It can show simple, short text data. It can be used to notify user about event occured in the app. </>,\r\n            example: GetPreivewWithoutCode(showToast)\r\n        },\r\n        {\r\n            name: \"Implementation\",\r\n            description: <>To call for toast use cUI event bus. Emit event <span className=\"style-class\">toast</span> with message to be displayed in element: </>,\r\n            example: getJsCodePreview(launchExample),\r\n            hint: {\r\n                title: \"Important\",\r\n                content: \"You can call only one toast at the time. If there is any toast showing on the screen, new calls will be ignored!\"\r\n            }\r\n        },\r\n    ]\r\n}","import { CuiDocsComponents } from \"../base\";\r\nimport { CuiDocsAlertScript } from \"./alert\";\r\nimport { CuiDocsPluginsIntroScript } from \"./introduction\";\r\nimport { CuiDocsNotificationScript } from \"./notification\";\r\nimport { CuiDocsToastScript } from \"./toast\";\r\n\r\nconst pluginsList: CuiDocsComponents = {\r\n    'introduction': { name: \"Introduction\", uri: '/docs/plugins/introduction', description: \"\", script: CuiDocsPluginsIntroScript },\r\n    'toast': { name: \"Toast\", uri: \"/docs/plugins/toast\", description: \"Shows lightweight information on the screen\", script: CuiDocsToastScript },\r\n    \"alert\": { name: \"Alert\", uri: \"/docs/plugins/alert\", description: \"Easy to use, interactive dialog\", script: CuiDocsAlertScript },\r\n    'notification': { name: \"Notification\", uri: \"/docs/plugins/notification\", description: \"Adds support for notification to library\", script: CuiDocsNotificationScript }\r\n}\r\n\r\nexport default pluginsList;","import { IElementGenerator, ITextParser, ParserNode } from \"./interfaces\";\r\n\r\nexport class ElementGenerator<T> implements IElementGenerator<T> {\r\n    #parser: ITextParser<T>;\r\n    constructor(parser: ITextParser<T>) {\r\n        this.#parser = parser;\r\n    }\r\n\r\n    build(data: ParserNode): T {\r\n        return this.#parser.parse(data, 0);\r\n    }\r\n}\r\n","import * as React from 'react'\r\nimport { ParserNode, ParserNodeAttribute } from '../../api/DocsElementParser/interfaces';\r\n\r\nexport interface preProps { \r\n    node: ParserNode;\r\n    level: number;\r\n}\r\n\r\ninterface ClasssesNodeProps { \r\n    classes: string[];\r\n}\r\n\r\ninterface AttributesNodeProps { \r\n    attributes: ParserNodeAttribute;\r\n}\r\n\r\n\r\n\r\nexport function PreNode(props: preProps) {\r\n    return (\r\n        <>\r\n            {\r\n                props.node.children && props.node.children.length > 0 ? \r\n                    <PreNodeWithChildren node={props.node} level={props.level} />\r\n                :\r\n                    <PreNodeWithoutChildren node={props.node} level={props.level}/>\r\n            }\r\n        </>);\r\n}\r\n\r\nexport function PreJsNode(pre: preProps) { \r\n    function create(pre: preProps): JSX.Element {\r\n        switch (pre.node.tag) { \r\n            case \"function\":\r\n                return createJsFunctionNode(pre)\r\n            case \"group\":\r\n                return createGroup(pre)\r\n            case \"object\":\r\n                return createObjectNode(pre);\r\n            default:\r\n                return createJsTextNode(pre.node, pre.level)\r\n        }\r\n    }\r\n        return (<>{create(pre)}</>)\r\n}\r\n\r\nfunction PreNodeWithoutChildren(props: preProps) { \r\n    return (<><span><span className={props.level > 0 ? \"cui-indent-\" + props.level : \"\"}>&lt;<span className=\"cui-tag\">{props.node.tag}</span>\r\n        <ClassesNode classes={props.node.classes} />\r\n        <AttributesNode attributes={props.node.attributes} />&gt;</span>\r\n        <span>{props.node.text}</span>\r\n        <span>&lt;/<span className=\"cui-tag\">{props.node.tag}</span>&gt;</span></span></>)\r\n}\r\n\r\nfunction PreNodeWithChildren(props: preProps) { \r\n    return (<><span><span className={props.level > 0 ? \"cui-indent-\" + props.level : \"\"}>&lt;<span className=\"cui-tag\">{props.node.tag}</span><ClassesNode classes={props.node.classes} /><AttributesNode attributes={props.node.attributes} />&gt;</span></span>\r\n            {\r\n                props.node.children && props.node.children.map((child: ParserNode, index: number) => {\r\n                    return <PreNode key={index} node={child} level={props.level + 1} />\r\n                })\r\n            }\r\n            <span><span className={props.level > 0 ? \"cui-indent-\" + props.level : \"\"}>&lt;/<span className=\"cui-tag\">{props.node.tag}</span>&gt;</span></span></>);\r\n}\r\n\r\nfunction ClassesNode(props: ClasssesNodeProps) { \r\n    let classesEl = props.classes ? (<span className=\"\">&nbsp;class=\"<span className=\"cui-var\">{props.classes.join(\" \")}</span>\"</span>) : \"\";\r\n    return (<>{classesEl}</>);\r\n}\r\n\r\nfunction AttributesNode(props: AttributesNodeProps) { \r\n    let attributesEl = props.attributes ? (enumerateAttributes(props.attributes)) : \"\";\r\n    function enumerateAttributes(attributes: ParserNodeAttribute) { \r\n        let arr = [];\r\n        for (let attr in attributes) { \r\n            arr.push((<span key={attr}>&nbsp;\r\n                {attr}=\"<span className=\"cui-var\">{attributes[attr]}</span>\"</span>))\r\n        }\r\n        return arr;\r\n    }\r\n    return (<>{attributesEl}</> );\r\n}\r\n\r\n// JS related\r\n\r\nfunction createJsTextNode(node: ParserNode, level: number) {\r\n    return <span><span className={level > 0 ? \"cui-indent-\" + level : \"\"}>{node.text}</span></span>;\r\n}\r\n\r\nfunction createJsFunctionNode(props: preProps) { \r\n    return (<><span><span className={props.level > 0 ? \"cui-indent-\" + props.level : undefined}>function <span className=\"cui-tag\">{props.node.text}</span>&#040;{functionArgs(props.node.attributes)}&#041; &#123;</span></span>\r\n        {\r\n            props.node.children && props.node.children.map((child: ParserNode, index: number) => {\r\n                return <PreJsNode key={index} node={child} level={props.level + 1} />\r\n            })\r\n        }\r\n        <span><span className={props.level > 0 ? \"cui-indent-\" + props.level : \"\"}>&#125;</span></span></>);\r\n}\r\n\r\nfunction createObjectNode(props: preProps) {\r\n    return (<><span><span className={props.level > 0 ? \"cui-indent-\" + props.level : undefined}>const <span className=\"cui-tag\">{props.node.text}</span> = &#123;</span></span>\r\n        {\r\n            props.node.children && props.node.children.map((child: ParserNode, index: number) => {\r\n                return <PreJsNode key={index} node={child} level={props.level + 1} />\r\n            })\r\n        }\r\n        <span><span className={props.level > 0 ? \"cui-indent-\" + props.level : \"\"}>&#125;</span></span></>);\r\n}\r\n\r\nfunction createGroup(props: preProps): JSX.Element { \r\n    return <>\r\n        {props.node.children.map((item, index) => { \r\n          return  <PreJsNode key={index} node={item} level={props.level} /> \r\n        })}\r\n    </>\r\n}\r\n\r\nfunction functionArgs(attr: ParserNodeAttribute) { \r\n     let attributesEl = attr && (enumerateAttributes(attr));\r\n    function enumerateAttributes(attributes: ParserNodeAttribute) { \r\n        let arr = [];\r\n        for (let attr in attributes) { \r\n            arr.push(\r\n                (<><span key={attr} className=\"cui-var\">{attr}</span><span>:{attributes[attr]}</span></>))\r\n        }\r\n\r\n        return arr;\r\n    }\r\n    let len = attributesEl ? attributesEl.length : 0;\r\n    return (<>{attributesEl.map((item: JSX.Element, index: number) => { \r\n        if (index < len - 1) {\r\n            return <>{item}, </>\r\n        }\r\n        return item\r\n    })}</> );\r\n}","import { count } from \"../utils/function\";\r\n\r\nexport const GLOBAL_COUNTER = count()","import { enumerate } from \"../../utils/function\";\r\n\r\nexport function createCallbackHandler<T>(init: ICuiCallbackHandlerInit<T>): CuiDocsCallbackHandler<T> {\r\n    const handler = new CuiDocsCallbackHandler<T>();\r\n    if (init) {\r\n        enumerate((key: string, value: ICuiDocsCallbacks<T>) => {\r\n            handler.addSingle({ prefix: key, callbacks: value })\r\n        }, init)\r\n    }\r\n    return handler;\r\n}\r\n\r\nexport class CuiDocsCallbackHandler<T> {\r\n    groups: ICuiCallbackGroup<T>[];\r\n    constructor() {\r\n        this.groups = [];\r\n    }\r\n\r\n    add(...groups: ICuiCallbackGroup<T>[]) {\r\n        if (!groups || groups.length === 0) {\r\n            return;\r\n        }\r\n        groups.forEach(g => this.addSingle(g))\r\n    }\r\n\r\n    addSingle(group: ICuiCallbackGroup<T>, replace?: boolean) {\r\n        if (!group || !group.prefix) {\r\n            return;\r\n        }\r\n        let idx = this.groups.findIndex(g => g.prefix === group.prefix)\r\n        if (idx < 0) {\r\n            this.groups.push(group)\r\n        }\r\n        if (replace === true) {\r\n            this.groups[idx] = group;\r\n        }\r\n    }\r\n\r\n    get(prefix: string): ICuiCallbackGroup<T> | undefined {\r\n        return prefix ? this.groups.find(g => g.prefix === prefix) : undefined;\r\n    }\r\n\r\n    call(name: string, ...args: T[]) {\r\n        let split = name.split(':');\r\n        if (split.length < 2) {\r\n            return;\r\n        }\r\n        let group = this.get(split[0].trim());\r\n        if (!group) {\r\n            return;\r\n        }\r\n        const callback = group.callbacks[split[1].trim()];\r\n        if (callback) {\r\n            callback(...args);\r\n        }\r\n    }\r\n\r\n}","import { createCallbackHandler } from \"./callbacks\";\r\n\r\nconst docsCallbacks = createCallbackHandler({\r\n    plugins: {\r\n        alert_info: () => {\r\n            const data = {\r\n                id: \"alert_base_dialog\",\r\n                type: \"Info\",\r\n                options: {\r\n                    title: \"Information\",\r\n                    message: \"Here is some message for the user\",\r\n                    onOk: () => {\r\n                        window.$cui.emit(\"toast\", '~toast-plugin', \"User confirmed\");\r\n                    }\r\n                }\r\n            }\r\n            window.$cui.emit(\"alert\", '~alert-plugin', data);\r\n        },\r\n        alert_ok_cancel: () => {\r\n            const data = {\r\n                id: \"alert_oc_dialog\",\r\n                type: \"OkCancel\",\r\n                options: {\r\n                    title: \"Confirm\",\r\n                    message: \"Here is some message for the user to confirm some action\",\r\n                    onOk: () => {\r\n                        window.$cui.emit(\"toast\", '~toast-plugin', \"User confirmed\");\r\n                    },\r\n                    onCancel: () => {\r\n                        window.$cui.emit(\"toast\", '~toast-plugin', \"User canceled\");\r\n                    }\r\n                }\r\n            }\r\n            window.$cui.emit(\"alert\", '~alert-plugin', data);\r\n        },\r\n        alert_yes_no_cancel: () => {\r\n            const data = {\r\n                id: \"alert_ync_dialog\",\r\n                type: \"YesNoCancel\",\r\n                options: {\r\n                    title: \"Decision\",\r\n                    message: \"Here is some message for the user to make some decision\",\r\n                    onYes: () => {\r\n                        window.$cui.emit(\"toast\", '~toast-plugin', \"User agreed\");\r\n                    },\r\n                    onNo: () => {\r\n                        window.$cui.emit(\"toast\", '~toast-plugin', \"User disagreed\");\r\n                    },\r\n                    onCancel: () => {\r\n                        window.$cui.emit(\"toast\", '~toast-plugin', \"User canceled\");\r\n                    }\r\n                }\r\n            }\r\n            window.$cui.emit(\"alert\", '~alert-plugin', data);\r\n        },\r\n        toast: () => {\r\n            window.$cui.emit(\"toast\", '~toast-plugin', \"Lorem ipsum\");\r\n        },\r\n        notify_base: () => {\r\n            window.$cui.emit(\"notify\", '~notification-plugin', {\r\n                id: 'notify-001' + Math.random(),\r\n                title: \"Notification\"\r\n            });\r\n        },\r\n        notify_description: () => {\r\n            window.$cui.emit(\"notify\", '~notification-plugin', {\r\n                id: 'notify-002' + Math.random(),\r\n                title: \"Notification\",\r\n                message: \"Notification message\"\r\n            });\r\n        },\r\n        notify_type: () => {\r\n            window.$cui.emit(\"notify\", '~notification-plugin', {\r\n                id: 'notify-003' + Math.random(),\r\n                title: \"Notification success\",\r\n                type: \"success\"\r\n            });\r\n        },\r\n        notify_action: () => {\r\n            window.$cui.emit(\"notify\", '~notification-plugin', {\r\n                id: 'notify-004' + Math.random(),\r\n                title: \"Notification\",\r\n                actions: [\r\n                    {\r\n                        name: \"Toast\",\r\n                        callback: () => {\r\n                            window.$cui.emit(\"toast\", '~toast-plugin', \"From notify\");\r\n                        }\r\n                    }\r\n                ]\r\n            });\r\n        },\r\n        notify_no_close: () => {\r\n            window.$cui.emit(\"notify\", '~notification-plugin', {\r\n                id: 'notify-005' + Math.random(),\r\n                title: \"No auto close\",\r\n                auto: false\r\n            });\r\n        }\r\n    }\r\n})\r\n\r\nexport default docsCallbacks;","import * as React from \"react\";\r\nimport { PreJsNode, PreNode } from \"../../components/partials/pre\";\r\nimport { GLOBAL_COUNTER } from \"../../statics/common\";\r\nimport { ITextParser, ParserNode } from \"./interfaces\";\r\nimport callbackHandler from \"../../statics/Callbacks/index\";\r\n\r\n// export class HTMLElementParser implements ITextParser<HTMLElement> {\r\n\r\n//     parse(node: ParserNode, level: number): HTMLElement {\r\n//         if (!node || !node.tag) {\r\n//             return undefined;\r\n//         }\r\n//         let element = document.createElement(node.tag)\r\n//         if (node.classes) {\r\n//             element.classList.add(...node.classes);\r\n//         }\r\n//         if (node.id) {\r\n//             element.id = node.id;\r\n//         }\r\n//         if (node.text) {\r\n//             element.textContent = node.text;\r\n//         }\r\n//         if (node.attributes) {\r\n//             for (let attribute in node.attributes) {\r\n//                 element.setAttribute(attribute, node.attributes[attribute]);\r\n//             }\r\n//         }\r\n//         if (node.children && node.children.length > 0) {\r\n//             node.children.forEach(child => {\r\n//                 element.appendChild(this.parse(child, level + 1))\r\n//             })\r\n\r\n//         }\r\n//         return element;\r\n//     }\r\n\r\n//     appendChildrens(element: HTMLElement, t: HTMLElement[]): HTMLElement {\r\n//         t.forEach(node => {\r\n//             element.appendChild(node);\r\n//         })\r\n//         return element;\r\n//     }\r\n\r\n// }\r\n\r\nexport class PreCodeParser implements ITextParser<HTMLElement> {\r\n    parse(node: ParserNode, level: number): HTMLElement {\r\n        let element = document.createElement(\"span\");\r\n        return element;\r\n    }\r\n\r\n    appendChildrens(element: HTMLElement, t: HTMLElement[]): HTMLElement {\r\n        t.forEach(node => {\r\n            element.appendChild(node);\r\n        })\r\n        return element;\r\n    }\r\n}\r\n\r\nexport class ReactParser implements ITextParser<any> {\r\n    parse(node: ParserNode, level: number): any {\r\n        let children: any[] = undefined;\r\n        let classes = node.classes ?? [];\r\n        let attributes = node.attributes ?? {};\r\n        let callback = undefined;\r\n        if (node.text) {\r\n\r\n            children = [node.text];\r\n        }\r\n        if (node.children) {\r\n            children = children ?? [];\r\n            node.children.forEach(child => {\r\n                children.push(this.parse(child, level + 1))\r\n            })\r\n        }\r\n        if (node.styleClass) {\r\n            classes.push(node.styleClass)\r\n        }\r\n\r\n        if (node.click) {\r\n            callback = () => {\r\n                callbackHandler.call(node.click)\r\n            }\r\n        }\r\n        return React.createElement(node.tag, {\r\n            className: classes.join(\" \"),\r\n            id: node.id,\r\n            key: node.tag + level + GLOBAL_COUNTER.next().value,\r\n            onClick: callback ? callback : undefined,\r\n            ...attributes\r\n        }, children)\r\n    }\r\n}\r\n\r\nexport class ReactPreParser implements ITextParser<any> {\r\n\r\n    parse(node: ParserNode, level: number) {\r\n        let arr = [];\r\n\r\n        if (node.text) {\r\n            arr.push(node.text)\r\n        }\r\n        return React.createElement(PreNode, { node: node, level: 0 });\r\n    }\r\n}\r\n\r\nexport class ReactJsParser implements ITextParser<JSX.Element> {\r\n    parse(node: ParserNode, level: number): JSX.Element {\r\n        return React.createElement(PreJsNode, { node: node, level: 0 })\r\n    }\r\n\r\n}","import * as React from \"react\";\r\nimport { ParserNode } from \"../../api/DocsElementParser/interfaces\";\r\nimport { ElementGenerator } from \"../../api/DocsElementParser/ElementGenerator\";\r\nimport { ReactPreParser, ReactParser, ReactJsParser } from \"../../api/DocsElementParser/GeneratorParsers\";\r\nimport { GLOBAL_COUNTER } from \"../../statics/common\";\r\n\r\nexport type CuiPreviewType = 'aside' | \"tabbed\";\r\n\r\nexport interface CodePreviewProps {\r\n    code: JSX.Element;\r\n    //  identification: string;\r\n    element: JSX.Element;\r\n    js?: JSX.Element;\r\n    height?: string;\r\n}\r\n\r\nexport interface JsCodePrevieProps {\r\n    js: JSX.Element;\r\n}\r\n\r\nexport interface TabbedPreviewProps {\r\n    node: ParserNode;\r\n}\r\n\r\nexport interface SimplePreviewProps {\r\n    element: JSX.Element;\r\n}\r\n\r\nexport function CodePreviewAside(props: CodePreviewProps) {\r\n    return (\r\n        <div className=\"cui-flex-grid cui-child-width-1-1 cui-child-width-1-2--s\">\r\n            <div>{props.element}</div>\r\n            <div className=\"cui-background-shade\">\r\n                <pre>{props.code}</pre>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function JsCodePreview(props: JsCodePrevieProps) {\r\n    return (\r\n        <div className=\"cui-code cui-format cui-line-counter\">\r\n            {props.js}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function SimplePreview(props: SimplePreviewProps) {\r\n    return (\r\n        <div className=\"cui-flex-center\">\r\n            {props.element}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function CodePreviewTabbed(props: CodePreviewProps) {\r\n    const identification = GLOBAL_COUNTER.next().value;\r\n    let tabId = \"tab-\" + identification;\r\n    let switchId = 'switch-' + identification;\r\n    let height = props.height ? \"; height:\" + props.height : \"\";\r\n    return (\r\n        <div className=\"\">\r\n            <ul className=\"cui-tab\" cui-switcher={`target: #${switchId}${height}`} id={tabId}>\r\n                <li><a href=\"#\">Preview</a></li>\r\n                {props.code && <li> <a href=\"#\">HTML</a></li>}\r\n                {props.js && <li> <a href=\"#\">Code</a></li>}\r\n            </ul>\r\n            <ul className=\"cui-switch cui-margin-top\" cui-switch={`links: #${tabId} > li${height}`} id={switchId}>\r\n                <li className=\"cui-active\"><div className=\"preview-wrapper\">{props.element}</div></li>\r\n                {props.code && <li>\r\n                    <div className=\"cui-code cui-format cui-line-counter cui-overflow-x-auto\">\r\n                        {props.code}\r\n                    </div>\r\n                </li>}\r\n                {props.js && <li>\r\n                    <div className=\"cui-code cui-format cui-line-counter\">\r\n                        {props.js}\r\n                    </div>\r\n                </li>}\r\n            </ul>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport function Preview(props: JsCodePrevieProps) {\r\n    return (\r\n        <div className=\"cui-code cui-format cui-line-counter\">\r\n            {props.js}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport function ExamplePreview(props: CodePreviewProps, type: CuiPreviewType) {\r\n\r\n    switch (type) {\r\n        case \"aside\":\r\n            return <CodePreviewAside code={props.code} element={props.element} />;\r\n        default:\r\n            return <CodePreviewTabbed code={props.code} element={props.element} js={props.js} height={props.height} />;\r\n    }\r\n\r\n}\r\n\r\nexport function getJsCodePreview(node: ParserNode) {\r\n    return <JsCodePreview js={new ElementGenerator(new ReactJsParser()).build(node)} />\r\n}\r\n\r\nexport function GetTabbedPreview(node: ParserNode, height?: string) {\r\n    return ExamplePreview({\r\n        code: new ElementGenerator(new ReactPreParser()).build(node),\r\n        element: new ElementGenerator(new ReactParser()).build(node),\r\n        height: height\r\n    }, 'tabbed')\r\n}\r\n\r\nexport function GetTabbedPreviewWithJs(node: ParserNode, js: string, height?: string) {\r\n    return ExamplePreview({\r\n        code: node && new ElementGenerator(new ReactPreParser()).build(node),\r\n        element: node && new ElementGenerator(new ReactParser()).build(node),\r\n        js: <div>{js}</div>,\r\n        height: height\r\n    }, 'tabbed')\r\n}\r\n\r\nexport function GetPreivewWithoutCode(node: ParserNode) {\r\n    return SimplePreview({\r\n        element: new ElementGenerator(new ReactParser()).build(node),\r\n    })\r\n}"],"sourceRoot":""}